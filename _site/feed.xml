<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-10-11T22:37:15+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Eunji Kim</title><subtitle>양념치킨🍗 좋아하는 개발자</subtitle><entry><title type="html">AWS 프리티어 계정 생성하기</title><link href="http://localhost:4000/aws/2022/10/11/aws-create-account.html" rel="alternate" type="text/html" title="AWS 프리티어 계정 생성하기" /><published>2022-10-11T14:00:00+09:00</published><updated>2022-10-11T14:00:00+09:00</updated><id>http://localhost:4000/aws/2022/10/11/aws-create-account</id><content type="html" xml:base="http://localhost:4000/aws/2022/10/11/aws-create-account.html"><![CDATA[<p>AWS 프리티어는 1년간 AWS 일부 서비스를 무료로 사용할 수 있는 것을 말한다. 회원 가입은 생각보다 간단하다.</p>

<h3 id="메일-인증">메일 인증</h3>

<p>가입할 E-mail 주소를 입력하고 [이메일 주소 확인]을 클릭-이메일 확인 코드를 입력한다.<br />
<img src="/public/img/aws-1.png" alt="aws1" /></p>

<p>참고로 탈퇴 후 재가입 할 경우에 같은 이메일은 회원가입이 안된다.</p>

<h3 id="사용-목적-및-개인정보">사용 목적 및 개인정보</h3>

<p>사용 목적은 [개인-자체 프로젝트의 경우]로 체크하고 리전은 [대한민국]으로 선택한다.</p>

<p><img src="/public/img/aws-2.png" alt="aws2" /></p>

<p>주소는 영문만 가능하니, 네이버에 영어 주소명을 검색해서 적어 넣으면 된다.</p>

<h3 id="카드-정보">카드 정보</h3>

<p>신용카드 정보를 입력하면 100원정도 돈이 나가는데, 금방 다시 들어온다.</p>

<p><img src="/public/img/aws-3.png" alt="aws3" /></p>

<h3 id="aws-플랜-선택">AWS 플랜 선택</h3>

<p>무료로 사용하려고 만드는 계정이니 Support 플랜은 [기본 지원-무료]를 선택하면 된다.<br />
<img src="/public/img/aws-4.png" alt="aws4" /></p>

<h3 id="로그인">로그인</h3>

<p>로그인 후 리전이 서울이 아닐 경우 아래와 같이 변경해주자</p>

<p><img src="/public/img/aws-5.png" alt="aws5" /></p>

<h3 id="mulit-factor-authentication">Mulit Factor Authentication</h3>

<p>MFA는 사용자 인증 방식 중 하나인데, 쉽게 말해 2차 인증이다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2차 인증을 왜 해야되나요?  

2차 인증은 AWS에서 하도록 권고하고 있지만 의무가 아니기 때문에 안하는 사람들도 많다.  
그런데 인터넷에 조금만 검색해도 AWS 계정 해킹으로 인해 억 단위로 피해를 입는 사람들이 꽤 있다. 
물론 잘 말해서 환불이나 내지 않도록 할 수 있겠지만 정신적으로 많이 피폐해지니, 그냥 2차 인증을 하도록 하자. 
</code></pre></div></div>

<p>2차 인증 방식에는 3가지가 있다.</p>

<ol>
  <li>Password : 사용자가 설정한 패스워드를 입력해서 인증</li>
  <li>OTP(One Time Password) : 사전에 OTP기기와 AWS에서 세팅 후 일정 시간동안 유효한 숫자를 입력하여 인증</li>
  <li>인증 전용 USB : 사전에 등록된 USB를 발급받고 인증</li>
</ol>

<p>이렇게 있지만 OTP가 제일 사용하기 무난하다.</p>

<h4 id="root-user-mfa">Root User MFA</h4>

<p>최초 가입일 경우 루트 유저일텐데 아래와 같이 [보안 자격 증명]을 클릭한다.</p>

<p><img src="/public/img/aws-6.png" alt="aws6" /></p>

<p>보안 자격 증명에서 MFA를 클릭한다.</p>

<p><img src="/public/img/aws-7.png" alt="aws7" /></p>

<p>MFA 활성화 클릭 후 [가상 MFA 디바이스] 체크 후 휴대폰으로 설정하면 끝난다. 
<img src="/public/img/aws-8.png" alt="aws8" /></p>

<h4 id="iam-user-mfa">IAM User MFA</h4>

<p>권한이 있다면 상관 없겠지만 권한이 없다면 아래와 같이 설정하자.</p>

<p><img src="/public/img/aws-8_1.png" alt="aws8-1" /></p>

<p>상단 검색창에 IAM을 검색 후 좌측 탭에 [사용자]를 클릭한다.</p>

<p><img src="/public/img/aws-9.png" alt="aws9" /></p>

<p>그리고 [보안 자격 증명]을 클릭하고 아까와 같이 설정하면 끝난다.</p>

<p><img src="/public/img/aws-10.png" alt="aws10" /></p>]]></content><author><name></name></author><category term="AWS" /><summary type="html"><![CDATA[AWS 프리티어는 1년간 AWS 일부 서비스를 무료로 사용할 수 있는 것을 말한다. 회원 가입은 생각보다 간단하다.]]></summary></entry><entry><title type="html">소프트웨어 라이선스 유형에 대해 알아보자</title><link href="http://localhost:4000/etc/2022/10/09/sortware-license.html" rel="alternate" type="text/html" title="소프트웨어 라이선스 유형에 대해 알아보자" /><published>2022-10-09T14:00:00+09:00</published><updated>2022-10-09T14:00:00+09:00</updated><id>http://localhost:4000/etc/2022/10/09/sortware-license</id><content type="html" xml:base="http://localhost:4000/etc/2022/10/09/sortware-license.html"><![CDATA[<p>라이선스의 종류에 대해 알아볼까한다.
최근 MIT 라이선스인 오픈 소스를 가지고 2차 창작물로 만들고 있는데, 내부에 LGPL라이선스를 가지고 있는 라이브러리를 보게 되었다.</p>

<p>개념이 조금 헷갈리기 시작해서 공부할 겸 적어볼까한다.</p>

<blockquote>
  <h3 id="라이선스-종류">라이선스 종류</h3>
</blockquote>

<ol>
  <li>Apache License</li>
  <li>GNU(Gnu is Not Unix)</li>
  <li>General Public License(GPL)</li>
  <li>Affero GPL(AGPL)</li>
  <li>Lesser GPL(LGPL)</li>
  <li>MIT License</li>
</ol>

<p>라이선스 종류는 더 있겠지만, 우선 가장 흔하게 볼 수 있는 라이선스만 먼저 다뤄보겠다.</p>

<blockquote>
  <h3 id="apache-license">Apache License</h3>
</blockquote>

<p>많이 들어온 아파치 라이선스는 아파치 소프트웨어 재단에서 자체적으로 만든 라이선스이다. <br />
아파치 라이선스는 누구든 자유롭게 사용이 가능하며, 부분 혹은 전체를 개인적 혹은 상업적 목적으로 이용할 수 있다. 소스코드에 대한 공개 의무 또한 없다.</p>

<p>그러나 반드시 아파치 라이선스 버전 및 표기는 포함하여 아파치 라이선스로 개발된 소프트웨어라는 것을 명확하게 밝혀야 한다.</p>

<h4 id="필수사항">필수사항</h4>

<ul>
  <li>라이선스 및 저작권 명시</li>
  <li>변경사항 명시</li>
</ul>

<h4 id="사용범위">사용범위</h4>

<ul>
  <li>상업적 이용 가능</li>
  <li>배포, 수정 가능</li>
  <li>특허 신청, 사적이용 가능</li>
  <li>2차 라이선스 가능</li>
</ul>

<h4 id="공개-유무">공개 유무</h4>

<p>소스코드 공개 의무 없지만 아파치 라이선스 사용을 밝혀야 함</p>

<blockquote>
  <h3 id="gnugnu-is-not-unix--general-public-licensegpl">GNU(Gnu is Not Unix) , General Public License(GPL)</h3>
</blockquote>

<p>우선 설명하기 전에 Copyleft에 대해 잠깐 보고 가자.</p>

<h4 id="copyleft">Copyleft</h4>
<p>Copyleft는 지식, 정보, 저작물은 자유롭게 공유되어야 한다라고 이야기한다.<br />
1980년대 리처드 스톨먼이 자유로운 소프트웨어 이용을 주장하면서 나왔다고 한다.</p>

<p>그래서 프로그램을 무료로 만들고 프로그램의 모든 수정 및 확장 버전도 무료로 요구한다.</p>

<h4 id="gnugnu-is-not-unix">GNU(Gnu is Not Unix)</h4>
<p>GNU는 1980년대 소프트웨어의 저작권에 대한 법률이 강화되면서 리처드 스톨먼에 의해 GNU 프로젝트와 Free Software Foundation(자유 소프트웨어 재단)을 세우고 여러 프로그래머들이 합류하며 시작되었다.</p>

<p>GNU프로젝트를 따르는 소프트웨어는 누구나 자유롭게 실행, 복사, 수정, 배포할 수 있고 이 권리를 침해할 수 없다.</p>

<h4 id="gpl-general-public-license">GPL (General Public License)</h4>

<p>GPL는 소스코드를 이용하게 될 경우, 전체를 포함한 소스 코드를 공개해야 한다. 이렇게 소스코드를 공개하는 이유는 최종적으로 오픈 소스 진영의 발전을 도모하는 것이 목적이라고 볼 수 있기 때문이다.</p>

<h4 id="필수사항-1">필수사항</h4>

<ul>
  <li>수정한 소스코드 또는 GPL 소스코드를 활용한 소프트웨어 모두 GPL로 공개</li>
  <li>라이선스 및 저작권 명시</li>
  <li>변경사항 명시</li>
</ul>

<h4 id="사용범위-1">사용범위</h4>

<ul>
  <li>상업적 이용 가능</li>
  <li>배포, 수정 가능</li>
  <li>특허 신청, 사적이용 가능</li>
</ul>

<h4 id="공개-유무-1">공개 유무</h4>

<p>개발시 개인적, 내적 이용에 한해서는 소스코드를 공개하지 않아도 되나, 외부 배포 시 해당 소프트웨어의 전체 소스코드를 공개해야 함.</p>

<blockquote>
  <h3 id="affero-gplagpl">Affero GPL(AGPL)</h3>
</blockquote>

<p>AGPL은 기존의 GPL v3을 수정한 것인데, 만약 서버에서 프로그램을 실행하여 서버 상에서 다른 사용자들과 통신하게 된다면 실행되고 있는 프로그램의 소스 코드를 사용자들이 다운로드 받을 수 있게 해야 한다.</p>

<h4 id="필수-사항">필수 사항</h4>

<ul>
  <li>수정한 소스 코드 및 프로그램 모두 AGPL로 공개</li>
  <li>라이선스 및 저작권 명시</li>
  <li>변경사항 명시</li>
  <li>네트워크내의 프로그램 사용자에게 소스코드 공개</li>
</ul>

<h4 id="사용범위-2">사용범위</h4>

<ul>
  <li>상업적 이용 가능</li>
  <li>수정 및 배포 가능</li>
  <li>특허 가능</li>
  <li>사적 이용 가능</li>
</ul>

<blockquote>
  <h3 id="lesser-gpllgpl">Lesser GPL(LGPL)</h3>
</blockquote>

<p>GPL에서 조금 더 완화된 라이선스이다. LGPL로 작성된 소스코드를 라이브러리(정적, 동적)로만 사용하는 경우에는 소스코드를 공개하지 않아도 된다(명시만 하면 됨). 그러나 LGPL 라이브러리의 소스코드를 수정하였을 때에는 2차적 파생 저작물에 해당하므로 라이브러리의 소스코드를 제공해야한다.</p>

<h4 id="필수-사항-1">필수 사항</h4>

<ul>
  <li>수정한 소스 코드 및 프로그램 모두 LGPL로 공개</li>
  <li>라이선스 및 저작권 명시</li>
  <li>라이브러리에만 적용</li>
</ul>

<h4 id="사용범위-3">사용범위</h4>

<ul>
  <li>상업적 이용 가능</li>
  <li>수정 및 배포 가능</li>
  <li>특허 가능</li>
  <li>사적 이용 가능</li>
</ul>

<h4 id="공개-유무-2">공개 유무</h4>

<p>LGPL로 작성된 소스코드를 라이브러리(정적, 동적)로만 사용하는 경우에 소스코드를 공개하지 않아도 됨. 그러나 LGPL 라이브러리의 소스코드를 수정하게 되면 2차적 파생 저작물에 해당되므로 라이브러리의 소스코드를 공개해야 함</p>

<h4 id="gpl-vs-lgpl-차이점">GPL vs LGPL 차이점</h4>
<p>GPL은 소스코드를 전부 공개, LGPL은 2차적 파생 저작물이 아니라면 단순한 라이브러리나 모듈 링크를 허용하는 라이선스.</p>

<blockquote>
  <h3 id="mit-license">MIT License</h3>
</blockquote>

<p>MIT에서 해당 대학의 소프트웨어 공학도들을 돕기 위해 개발한 라이선스이다.</p>

<h4 id="필수-사항-2">필수 사항</h4>

<ul>
  <li>라이선스 및 저작권 명시</li>
</ul>

<h4 id="사용범위-4">사용범위</h4>

<ul>
  <li>상업적 이용 가능</li>
  <li>수정 및 배포 가능</li>
  <li>특허 가능</li>
  <li>사적 이용 가능</li>
  <li>2차 라이선스 가능</li>
</ul>

<hr />
<p>Reference</p>

<p><a href="https://ldap.or.kr/open-source-%EB%9D%BC%EC%9D%B4%EC%84%A0%EC%8A%A4-%EB%B3%84-%ED%8A%B9%EC%A7%95-%EC%A0%95%EB%A6%AC/">https://ldap.or.kr/</a> <br />
<a href="https://datalibrary.tistory.com/111">https://datalibrary.tistory.com/111</a></p>]]></content><author><name></name></author><category term="ETC" /><summary type="html"><![CDATA[라이선스의 종류에 대해 알아볼까한다. 최근 MIT 라이선스인 오픈 소스를 가지고 2차 창작물로 만들고 있는데, 내부에 LGPL라이선스를 가지고 있는 라이브러리를 보게 되었다.]]></summary></entry><entry><title type="html">Python환경 OpenCV + CUDA Build 하기</title><link href="http://localhost:4000/etc/2022/10/03/python-opencv-cuda-build.html" rel="alternate" type="text/html" title="Python환경 OpenCV + CUDA Build 하기" /><published>2022-10-03T14:00:00+09:00</published><updated>2022-10-03T14:00:00+09:00</updated><id>http://localhost:4000/etc/2022/10/03/python-opencv-cuda-build</id><content type="html" xml:base="http://localhost:4000/etc/2022/10/03/python-opencv-cuda-build.html"><![CDATA[<p>최근에 OpenCV Build 하면서 많이 헤맸는데, 이번 기회에 OpenCV빌드에 필요한 내용을 정리해볼까한다.</p>

<h3 id="준비사항">준비사항</h3>

<ol>
  <li>OpenCV : <a href="https://github.com/opencv/opencv">https://github.com/opencv/opencv</a></li>
  <li>OpenCV Contrib : <a href="https://github.com/opencv/opencv_contrib">https://github.com/opencv/opencv_contrib</a></li>
  <li>CMake : <a href="https://cmake.org/download/">https://cmake.org/download/</a></li>
  <li>Visual Studio 2019 : <a href="https://learn.microsoft.com/ko-kr/visualstudio/releases/2019/release-notes">https://learn.microsoft.com/ko-kr/visualstudio</a></li>
</ol>

<h3 id="가상환경-구성">가상환경 구성</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 가상환경 생성 
conda create --name 가상환경 이름 python=3.7

# 가상환경 활성화
conda activate 가상환경 이름

conda install numpy
</code></pre></div></div>

<p>✔ 체크 할 부분</p>
<ul>
  <li>numpy 설치 후 잘 되는지 확인!</li>
  <li>cv2 있는지 확인 할 것. (cv2가 있으면 안됨)</li>
</ul>

<p><img src="/public/img/opencv1.png" alt="opencv" /></p>

<h3 id="opencv--opencv-contrib">OpenCV &amp; OpenCV contrib</h3>

<p>opencv와 opencv contrib를 zip 형태로 다운로드 후 C드라이브에 아래와 같이 풀자.</p>

<p><img src="/public/img/opencv2.png" alt="opencv2" /></p>

<p>저는 C드라이브 밑에 opencvgpu 라는 폴더에 다운 받은 폴더를 풀었고, build하고 생성되는 파일을 담기 위해 build 파일 하나 생성했다.</p>

<p>그리고 선택 사항이지만, opencv contrib/modules안에 복붙 후 opencv/modules 안에 넣으면 CMake 빌드할때 따로 경로 설정을 안해도 된다.</p>

<h3 id="cmake-build">CMake Build</h3>

<p><img src="/public/img/opencv3.png" alt="opencv3" /></p>

<p>CMake에 Where is the source code에는 아까 다운 받은 opencv 폴더 경로, 아래에는 build폴더를 넣는다.</p>

<p><img src="/public/img/opencv4.png" alt="opencv4" /></p>

<p>그리고 Configure를 누르면 아래와 같이 창이 뜨면 아래와 같이 설정 후 Finish를 누른다.</p>

<ul>
  <li>WITH_CUDA = ON</li>
  <li>OPENCV_DNN_CUDA = ON</li>
  <li>ENABLE_FAST_MATH = ON</li>
  <li>INSTALL_PYTHON_EXAMPLES = ON</li>
</ul>

<p>Configire 를 누른다.</p>

<ul>
  <li>WITH_CUDNN = ON</li>
  <li>WITH_CUBLAS = ON</li>
  <li>CUDA_FAST_MATH = ON</li>
</ul>

<p>CUDA ARCH BIN은 <a href="https://en.wikipedia.org/wiki/CUDA">https://en.wikipedia.org/wiki/CUDA</a>에서 자신의 그래픽에 맞늦
번호를 찾으면 된다. 나의 경우는 3060 그래픽이기 때문에 8.6으로 했다.</p>

<ul>
  <li>CUDA_ARCH_BIN = 8.6</li>
</ul>

<p>아래 경로는 아까 생성했던 가상환경을 아래처럼 넣어준다.</p>

<ul>
  <li>PYTHON3_EXECUTABLE = C:/Users/ejkim/anaconda3/envs/opencv_gpu/python.exe</li>
  <li>PYTHON3_INCLUDE_DIR = C:/Users/ejkim/anaconda3/envs/opencv_gpu/include</li>
  <li>PYTHON3_LIBRARY = C:/Users/ejkim/anaconda3/envs/opencv_gpu/libs/python37.lib</li>
  <li>PYTHON3_LIBRARY_DEBUG = C:/Users/ejkim/anaconda3/envs/opencv_gpu/libs/python37.lib</li>
  <li>PYTHON3_NUMPY_INCLUDE_DIRS = C:/Users/ejkim/anaconda3/envs/opencv_gpu/Lib/site-packages/numpy/core/include</li>
  <li>PYTHON3_PACKAGES_PATH = C:/Users/ejkim/anaconda3/envs/opencv_gpu/Lib/site-packages</li>
  <li>BUILD_opencv_world = ON</li>
  <li>OPENCV_ENABLE_NONFREE = ON</li>
  <li>BUILD_WITH_STATIC_CRT = OFF</li>
  <li>CPU_DISPATCH = 공백</li>
</ul>

<p>Configire 누른 후 Generate를 누른다.</p>

<p><img src="/public/img/opencv5.png" alt="opencv5" /></p>

<p>그럼 이렇게 build 폴더에 여러 파일이 생성되는데 여기서 OpenCV.sin을 눌러 Visual Studio 2019를 연다.</p>

<p><img src="/public/img/opencv6.png" alt="opencv6" /></p>

<p>Release, x64로 설정하고 ALL_BUILD에서 빌드를 누른다.</p>

<p><img src="/public/img/opencv7.png" alt="opencv7" /></p>

<p>빌드 끝나면, 다시 INSTALL 우클릭 후 빌드 눌러서 빌드 한다.</p>

<p><img src="/public/img/opencv8.png" alt="opencv8" /></p>

<p>빌드가 끝나면 아래와 같은 경로에 폴더가 생긴다.</p>

<p><img src="/public/img/opencv12.png" alt="opencv12" /></p>

<p>빌드가 잘된 것을 확인 했으니, 아래와 같이 경로를 잡아준다.</p>

<p><img src="/public/img/opencv10.png" alt="opencv10" /></p>

<p>시스템 변수로 위와 같이 잡아주고, Path에 <code class="highlighter-rouge">%OPENCV_DIR%\x64\vc16\bin</code> 를 적어 넣어준다.</p>

<p><img src="/public/img/opencv11.png" alt="opencv11" /></p>

<p>그리고 <code class="highlighter-rouge">cv2.cuda.getCudaEnabledDeviceCount()</code> 로 GPU가 잡히는지 확인하면 끝! 
나는 그래픽 카드가 1개 설치되어 있어서 1이 나온다.</p>

<p>아 그리고, 
하다가 중간에 <code class="highlighter-rouge">ImportError: OpenCV loader: missing configuration file: ['config-3.7.py', 'config-3.py']</code> 와 같은 에러를 만약 보게 된다면, 파이썬 버전을 확인해보자.</p>

<p>나의 경우에는 가상환경 생성 시에 Python 3.7로 생성했는데, 실제 빌드하고 나니까 아래와 같이 파이썬 3.9로 빌드되어 있었다.</p>

<p><img src="/public/img/opencv9.png" alt="opencv9" /></p>

<p>이때 해결법은 두가지인데, 첫번째는 다시 밀고 처음부터 빌드하거나 두번째는 파이썬 3.9로 빌드되어 있으니, 가상환경 파이썬 버전도 3.9로 맞춰준다.</p>

<p>나는 두가지 다 해봤는데, 첫번째의 경우에는 밀고 다시 처음부터를 3번정도 반복하니까…. 잘되었고, 다른 컴퓨터에 다시 빌드 했을 때는 그냥 귀찮아서 파이썬 버전을 맞춰주니 금방 끝났다.</p>

<p>가상환경 파이썬 버전을 다시 맞출 때는 <code class="highlighter-rouge">conda install python==3.9</code> 라고 하면 끝난다.</p>

<p>그리고, 혹시나 빌드 후에 cv2파일이 생성되지 않았다면, CMake 빌드를 위 순서대로 해야 제대로 생성된다.</p>]]></content><author><name></name></author><category term="ETC" /><summary type="html"><![CDATA[최근에 OpenCV Build 하면서 많이 헤맸는데, 이번 기회에 OpenCV빌드에 필요한 내용을 정리해볼까한다.]]></summary></entry><entry><title type="html">Django - 로그인 페이지 구현하기</title><link href="http://localhost:4000/etc/2022/09/04/django-login.html" rel="alternate" type="text/html" title="Django - 로그인 페이지 구현하기" /><published>2022-09-04T06:00:00+09:00</published><updated>2022-09-04T06:00:00+09:00</updated><id>http://localhost:4000/etc/2022/09/04/django-login</id><content type="html" xml:base="http://localhost:4000/etc/2022/09/04/django-login.html"><![CDATA[<p>우선 최종적으로 구현된 로그인 페이지는 아래와 같습니다.</p>

<p><img src="/public/img/django4.png" alt="django4" class="center" /></p>

<p>로그인 페이지에서 값 입력 후 <code class="highlighter-rouge">Login</code>을 누르면 <code class="highlighter-rouge">Home</code>으로 넘어가는 부분을 구현 해보도록 하겠습니다.  기본적으로 장고에서 로그인 기능을 제공해주기 때문에 로그인 폼을 가져오고 CSS를 입혀보겠습니다.</p>

<h2 id="settings">Settings</h2>

<p>우선 <a href="https://django-crispy-forms.readthedocs.io/en/latest/template_packs.html#template-packs">Django 라이브러리</a>를 설치합니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install django-crispy-forms
</code></pre></div></div>

<p>설치 후 아래와 같이 파일을 수정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># settings.py
</span>
<span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">'django.contrib.admin'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth'</span><span class="p">,</span>
    <span class="s">'django.contrib.contenttypes'</span><span class="p">,</span>
    <span class="s">'django.contrib.sessions'</span><span class="p">,</span>
    <span class="s">'django.contrib.messages'</span><span class="p">,</span>
    <span class="s">'django.contrib.staticfiles'</span><span class="p">,</span>
    <span class="s">'crispy_forms'</span><span class="p">,</span> <span class="c1"># 추가 
</span>    <span class="s">'accounts.apps.AccountsConfig'</span><span class="p">,</span> <span class="c1"># 앱 추가 
</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="login-html">Login html</h2>

<p>아래와 같이 <code class="highlighter-rouge">login.html</code> 을 만들었습니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"static/css/style.css"</span><span class="nt">&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"wrapper"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"title"</span><span class="nt">&gt;</span>
      Login
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"input_wrap"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"error_msg"</span><span class="nt">&gt;</span>Incorrect username or password. Please try again<span class="nt">&lt;/span&gt;</span>
          {"%" csrf_token "%"}
          {"{"login_form"}"}
      <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"btn disabled input_wrap"</span> <span class="na">style=</span><span class="s">"padding: 15px"</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="nt">&gt;</span>Login<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
      <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"text-center"</span><span class="nt">&gt;</span>Don't have an account? <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/register"</span><span class="nt">&gt;</span>Create an account<span class="nt">&lt;/a&gt;</span>.<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>위 코드에서 <code class="highlighter-rouge">{"%" csrf_token "%"}, {"{"login_form"}"}</code>에서 따옴표는 제거하고 사용해주세요.<br />
참고로 저는아래와 같은 파일구조로 되어 있습니다.</p>

<p><img src="/public/img/django5.png" alt="django5" class="center" /></p>

<h2 id="login-url">Login URL</h2>

<p>전 첫 화면에 무조건 로그인 화면이 나오기를 바라기 때문에 아래와 같이 URL을 만들었습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">app_name</span> <span class="o">=</span> <span class="s">"accounts"</span> 

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">login_request</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"login"</span><span class="p">),</span> <span class="c1"># 로그인 페이지
</span>    <span class="n">path</span><span class="p">(</span><span class="s">"home/"</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">home_request</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"home"</span><span class="p">),</span> <span class="c1"># 홈 화면 페이지 
</span>    <span class="n">path</span><span class="p">(</span><span class="s">"register/"</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">register_request</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"register"</span><span class="p">),</span> <span class="c1"># 회원가입 페이지
</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="login-form">Login Form</h2>

<p><code class="highlighter-rouge">views.py</code>에 아래와 같이 코드를 추가합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span><span class="p">,</span> <span class="n">redirect</span>
<span class="kn">from</span> <span class="nn">django.contrib.auth</span> <span class="kn">import</span> <span class="n">login</span><span class="p">,</span> <span class="n">authenticate</span>
<span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">messages</span>
<span class="kn">from</span> <span class="nn">django.contrib.auth.forms</span> <span class="kn">import</span> <span class="n">AuthenticationForm</span>


<span class="c1"># 홈 화면 
</span><span class="k">def</span> <span class="nf">home_request</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="o">=</span><span class="n">request</span><span class="p">,</span> <span class="n">template_name</span><span class="o">=</span><span class="s">"main/home.html"</span><span class="p">)</span>

<span class="c1"># 로그인 화면 
</span><span class="k">def</span> <span class="nf">login_request</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">"POST"</span><span class="p">:</span>
        <span class="n">form</span> <span class="o">=</span> <span class="n">AuthenticationForm</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">form</span><span class="p">.</span><span class="n">is_valid</span><span class="p">():</span>
            <span class="n">username</span> <span class="o">=</span> <span class="n">form</span><span class="p">.</span><span class="n">cleaned_data</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'username'</span><span class="p">)</span>
            <span class="n">password</span> <span class="o">=</span> <span class="n">form</span><span class="p">.</span><span class="n">cleaned_data</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'password'</span><span class="p">)</span>
            <span class="n">user</span> <span class="o">=</span> <span class="n">authenticate</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="n">password</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">user</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">login</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">user</span><span class="p">)</span>
                <span class="n">messages</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="sa">f</span><span class="s">"You are now logged in as </span><span class="si">{</span><span class="n">username</span><span class="si">}</span><span class="s">."</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">"/home"</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">messages</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="s">"Invalid username or password."</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">messages</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="s">"Invalid username or password."</span><span class="p">)</span>
    <span class="n">form</span> <span class="o">=</span> <span class="n">AuthenticationForm</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="o">=</span><span class="n">request</span><span class="p">,</span> <span class="n">template_name</span><span class="o">=</span><span class="s">"main/login.html"</span><span class="p">,</span> <span class="n">context</span><span class="o">=</span><span class="p">{</span><span class="s">"login_form"</span><span class="p">:</span><span class="n">form</span><span class="p">})</span>
</code></pre></div></div>

<p>저는 로그인 성공되면 홈 화면이 나올 수 있도록 <code class="highlighter-rouge">redirect('/home')</code>으로 작성하였습니다.</p>

<h2 id="login-css">Login CSS</h2>

<p>로그인 CSS는 아래와 같고, 만약에 아래의 CSS가 적용이 되지 않는다면, 경로 확인 부탁드려요~!</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@import</span> <span class="sx">url('https://fonts.googleapis.com/css2?family=Jost:wght@400;700&amp;display=swap')</span><span class="p">;</span>

<span class="o">*</span><span class="p">{</span>
	<span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
	<span class="nl">padding</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
	<span class="nl">box-sizing</span><span class="p">:</span> <span class="n">border-box</span><span class="p">;</span>
	<span class="nl">font-family</span><span class="p">:</span> <span class="s2">'Jost'</span><span class="p">,</span> <span class="nb">sans-serif</span><span class="p">;</span>
	<span class="nl">outline</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
	<span class="nl">color</span><span class="p">:</span> <span class="m">#000000</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">body</span><span class="p">{</span>
	<span class="nl">background</span><span class="p">:</span> <span class="n">linear-gradient</span><span class="p">(</span><span class="n">to</span> <span class="nb">right</span><span class="p">,</span> <span class="m">#f4b661</span><span class="p">,</span> <span class="m">#f16160</span><span class="p">);</span>
<span class="p">}</span>

<span class="nc">.wrapper</span><span class="p">{</span>
	<span class="nl">min-height</span><span class="p">:</span> <span class="m">100vh</span><span class="p">;</span>
	<span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
	<span class="nl">justify-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
	<span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span><span class="p">{</span>
	<span class="nl">width</span><span class="p">:</span> <span class="m">425px</span><span class="p">;</span>
	<span class="nl">height</span><span class="p">:</span> <span class="nb">auto</span><span class="p">;</span>
	<span class="nl">background</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
	<span class="nl">padding</span><span class="p">:</span> <span class="m">35px</span> <span class="m">50px</span><span class="p">;</span>
	<span class="nl">border-radius</span><span class="p">:</span> <span class="m">2px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span> <span class="nc">.title</span><span class="p">{</span>
	<span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
	<span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span>
	<span class="nl">font-weight</span><span class="p">:</span> <span class="m">700</span><span class="p">;</span>
	<span class="nl">font-size</span><span class="p">:</span> <span class="m">24px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span> <span class="nc">.input_wrap</span><span class="p">{</span>
	<span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span>
	<span class="nl">width</span><span class="p">:</span> <span class="m">325px</span><span class="p">;</span>
	<span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span> <span class="nc">.input_wrap</span><span class="nd">:last-child</span><span class="p">{</span>
	<span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span> <span class="nc">.input_wrap</span> <span class="nt">label</span><span class="p">{</span>
	<span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
	<span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">5px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span> <span class="nc">.input_wrap</span> <span class="nt">input</span><span class="p">{</span>
	<span class="nl">padding</span><span class="p">:</span> <span class="m">15px</span><span class="p">;</span>
	<span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
	<span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="m">#bdc1c6</span><span class="p">;</span>
	<span class="nl">font-size</span><span class="p">:</span> <span class="m">16px</span><span class="p">;</span>
	<span class="nl">border-radius</span><span class="p">:</span> <span class="m">3px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span> <span class="nc">.input_wrap</span> <span class="nc">.input</span><span class="p">{</span>
	<span class="nl">background</span><span class="p">:</span> <span class="m">#f5f4f4</span><span class="p">;</span>
	<span class="nl">padding-right</span><span class="p">:</span> <span class="m">35px</span><span class="p">;</span>
<span class="p">}</span>


<span class="nc">.form</span> <span class="nc">.input_wrap</span> <span class="nc">.input</span><span class="nd">:focus</span><span class="p">{</span>
	<span class="nl">border-color</span><span class="p">:</span> <span class="m">#1dbf73</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span> <span class="nc">.input_wrap</span> <span class="nc">.input_field</span><span class="p">{</span>
	<span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span> <span class="nc">.input_wrap</span> <span class="nc">.btn</span><span class="p">{</span>
	<span class="nl">text-transform</span><span class="p">:</span> <span class="nb">uppercase</span><span class="p">;</span>
	<span class="nl">letter-spacing</span><span class="p">:</span> <span class="m">3px</span><span class="p">;</span>
	<span class="nl">color</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span> <span class="nc">.input_wrap</span> <span class="nc">.btn.disabled</span><span class="p">{</span>
	<span class="nl">background</span><span class="p">:</span> <span class="m">#F0F0F0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span> <span class="nc">.input_wrap</span> <span class="nc">.btn.enabled</span><span class="p">{</span>
	<span class="nl">background</span><span class="p">:</span> <span class="m">#1dbf73</span><span class="p">;</span>
	<span class="nl">cursor</span><span class="p">:</span> <span class="nb">pointer</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span> <span class="nc">.input_wrap</span> <span class="nc">.error_msg</span><span class="p">{</span>
	<span class="nl">font-size</span><span class="p">:</span> <span class="m">15px</span><span class="p">;</span>
	<span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">5px</span><span class="p">;</span>
	<span class="nl">color</span><span class="p">:</span> <span class="m">#f74040</span><span class="p">;</span>
	<span class="nl">display</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이제 로그인 화면이 완성되었고, 다음에는 회원가입 기능을 추가해보도록 하겠습니다.</p>]]></content><author><name></name></author><category term="ETC" /><summary type="html"><![CDATA[우선 최종적으로 구현된 로그인 페이지는 아래와 같습니다.]]></summary></entry><entry><title type="html">Django - 관리자 페이지 구현하기</title><link href="http://localhost:4000/etc/2022/09/03/django-admin.html" rel="alternate" type="text/html" title="Django - 관리자 페이지 구현하기" /><published>2022-09-03T15:00:00+09:00</published><updated>2022-09-03T15:00:00+09:00</updated><id>http://localhost:4000/etc/2022/09/03/django-admin</id><content type="html" xml:base="http://localhost:4000/etc/2022/09/03/django-admin.html"><![CDATA[<p>이번 포스팅에서는 관리자 페이지 구현에 대해 다루어보겠습니다.</p>

<h2 id="django-관리자-페이지">Django 관리자 페이지</h2>

<p>Django는 많은 기능을 제공하는데, 그 중 관리자 페이지도 기본적으로 제공됩니다.<br />
그렇기 때문에 많은 작업을 하실 필요는 없습니다.</p>

<p>아래의 명령어를 실행해서 슈퍼유저를 생성합니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python manage.py migrate 
python manage.py createsuperuser
</code></pre></div></div>

<p>Username, Email address, Password 입력까지 끝냈다면 http://127.0.0.1:8000/admin 으로 들어가면 아래와 같은 화면을 볼 수 있습니다.</p>

<p><img src="/public/img/django2.png" alt="django2" width="60%" height="60%" class="center" /></p>

<p>로그인하면 아래와 같은 화면을 볼 수 있으며 여기서 유저 추가, 유저 권한 부여도 가능합니다.</p>

<p><img src="/public/img/django3.png" alt="django3" class="center" /></p>

<p>관리자 인증 문제가 있어서 다른 컴퓨터로 관리자 로그인이 안될 때가 있어서 <code class="highlighter-rouge">settings.py</code>에 아래 코드를 추가해줍니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># settings.py
</span><span class="n">AUTHENTICATION_BACKENDS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">'django.contrib.auth.backends.ModelBackend'</span><span class="p">,</span>
<span class="p">]</span>
</code></pre></div></div>

<p>이제 어디서든 관리자 페이지에서 로그인이 가능합니다.</p>]]></content><author><name></name></author><category term="ETC" /><summary type="html"><![CDATA[이번 포스팅에서는 관리자 페이지 구현에 대해 다루어보겠습니다.]]></summary></entry><entry><title type="html">Django - 프로젝트 생성하기</title><link href="http://localhost:4000/etc/2022/09/03/django-startproject.html" rel="alternate" type="text/html" title="Django - 프로젝트 생성하기" /><published>2022-09-03T14:00:00+09:00</published><updated>2022-09-03T14:00:00+09:00</updated><id>http://localhost:4000/etc/2022/09/03/django-startproject</id><content type="html" xml:base="http://localhost:4000/etc/2022/09/03/django-startproject.html"><![CDATA[<p>이번 포스팅에서는 장고 프로젝트를 생성해보도록 하겠습니다.</p>

<h2 id="django-프로젝트-생성">Django 프로젝트 생성</h2>

<p>장고가 설치되어 있지 않다면 아래 명령어로 설치해주세요.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python -m pip install Django
</code></pre></div></div>

<p>프로젝트는 아래와 같이 생성합니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>django-admin startproject LabelingTools
</code></pre></div></div>

<p>저는 <code class="highlighter-rouge">LabelingTools</code> 이라는 이름으로 프로젝트를 생성했습니다.</p>

<h3 id="django-setting">Django Setting</h3>

<p>처음에 세팅해야 하는 부분은 아래와 같습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#settings.py
</span><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">'django.contrib.admin'</span><span class="p">,</span>  
    <span class="s">'django.contrib.auth'</span><span class="p">,</span> 
    <span class="s">''</span> <span class="c1"># 앱이 있으면 이름 추가 
</span><span class="p">]</span>

<span class="p">...</span>

<span class="c1"># LANGUAGE_CODE = 'en-us'
</span><span class="n">LANGUAGE_CODE</span> <span class="o">=</span> <span class="s">'ko'</span> <span class="c1"># 한글로 보고싶으면 언어설정 해주기
</span></code></pre></div></div>

<p>프로젝트가 제대로 동작하는지 확인하려면 <code class="highlighter-rouge">manage.py</code> 파일이 있는 위치에서 아래와 같이 명령어로 실행합니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python manage.py runserver
</code></pre></div></div>

<p><img src="/public/img/django1-1.png" alt="django1-1" class="center" /></p>

<p>기본 포트는 8000번이지만, 포트를 변경하고 싶다면 아래와 같이 수정하여 사용할 수 있습니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python manage.py runserver 8080 
# 또는 
python manage.py runserver 0:8080 
</code></pre></div></div>

<p>추가로 매번 <code class="highlighter-rouge">python manage.py runserver</code>를 치는 것이 불편하여 bat파일을 작성해줍니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@echo off
echo ===============Run Django===================
python ./LabelingTools/manage.py runserver
</code></pre></div></div>

<p>저는 앞으로 <code class="highlighter-rouge">python manage.py runserver</code> 라는 명령어 대신 <code class="highlighter-rouge">call run.bat</code>을 입력하면 장고가 실행됩니다.</p>

<p><img src="/public/img/django1.png" alt="django1" width="60%" height="60%" class="center" /></p>]]></content><author><name></name></author><category term="ETC" /><summary type="html"><![CDATA[이번 포스팅에서는 장고 프로젝트를 생성해보도록 하겠습니다.]]></summary></entry><entry><title type="html">Docker와 YOLOv4 사용하기</title><link href="http://localhost:4000/machinelearning/2022/08/20/docker-yolo4.html" rel="alternate" type="text/html" title="Docker와 YOLOv4 사용하기" /><published>2022-08-20T16:00:00+09:00</published><updated>2022-08-20T16:00:00+09:00</updated><id>http://localhost:4000/machinelearning/2022/08/20/docker-yolo4</id><content type="html" xml:base="http://localhost:4000/machinelearning/2022/08/20/docker-yolo4.html"><![CDATA[<p>Docker환경에서 YOLOv4를 학습시키려고 한다.<br />
GPU로 돌릴 예정이기 때문에 Docker Hub에서 <a href="https://hub.docker.com/r/nvidia/cuda">Nvidia CUDA</a> 이미지를 사용했다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull nvidia/cuda:11.6.0-cudnn8-devel-ubuntu20.04
</code></pre></div></div>

<p>버전은 각자 컴퓨터 사양에 맞게 하면 되는데 나는 11.6 버전으로 진행하였다. 해당 이미지는 cudnn까지 설치되어 있어서 따로 cudnn까지 설치는 하지 않아도 된다.</p>

<p><img src="/public/img/yolo1.png" alt="yolo1" class="center" /></p>

<p>이미지를 실행 시킬때 <code class="highlighter-rouge">--runtime=nvidia</code> 라던가 <code class="highlighter-rouge">--gpus</code> 옵션을 사용하지 않는다면 cpu로 돌아가니 주의하자.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run -it --gpus all -e DISPLAY=unix$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix --privileged nvidia/cuda:11.6.0-cudnn8-devel-ubuntu20.04
</code></pre></div></div>

<p>나는 Docker에서 yolo를 돌리면서 이미지나 그래프를 확인하고 싶어서 내 화면에 띄우기 위해 DISPLAY 옵션을 넣었다. 나처럼 도커에서 실행한 이미지결과를 확인하고 싶다면 
<a href="https://sourceforge.net/projects/xming/">Xming X Server for Windows</a>를 설치, 도커 실행 후 <code class="highlighter-rouge">apt-get install x11-apps</code> 와 <code class="highlighter-rouge">export DISPLAY=WINDOWS_IP:0.0</code> 를 해주면 된다.</p>

<p>이미지 실행 후 <code class="highlighter-rouge">nvidia-smi</code> 와 <code class="highlighter-rouge">nvcc -V</code>으로 CUDA가 잘 잡히는지 확인하자.</p>

<p><img src="/public/img/yolo2.png" alt="yolo2" class="center" /></p>

<p>참고로 <code class="highlighter-rouge">nvidia-smi</code> 에서 보이는 CUDA Version의 경우에는 현재 driver와 호환이 잘되는 CUDA버전을 추천해주는 것이지 현재의 CUDA 버전을 이야기하는 것은 아니다. 그래서 <code class="highlighter-rouge">nvcc -V</code>로 현재의 버전을 보면 된다.</p>

<p>이제 yolo를 사용하기 위해 아래와 같이 <a href="https://github.com/AlexeyAB/darknet">Git clone</a> 받자</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get update
apt install git
apt install vim
apt install wget
sudo apt-get install libopencv-dev # opencv=0으로 할꺼면 빼도 된다.
git clone https://github.com/AlexeyAB/darknet.git
</code></pre></div></div>

<p>아래와 같이 파일이 들어와 있다면 잘 된 것이다</p>

<p><img src="/public/img/yolo3.png" alt="yolo3" class="center" /></p>

<p>우선 Makefile을 아래와 수정하자.</p>

<p><img src="/public/img/yolo4.png" alt="yolo4" class="center" /></p>

<p>그리고 <code class="highlighter-rouge">make</code> 를 입력하면 아래와 같이 <code class="highlighter-rouge">darknet</code> 파일이 생기는 것을 볼 수 있다.</p>

<p><img src="/public/img/yolo5.png" alt="yolo5" class="center" /></p>

<p>가중치 파일을 다운 받아야하는데 나는 <code class="highlighter-rouge">yolov4.conv.137</code> 를 사용하였다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.conv.137
</code></pre></div></div>

<p><img src="/public/img/yolo6.png" alt="yolo6" class="center" /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./darknet detector train cfg/coco.data cfg/yolov4.cfg yolov4.conv.137
</code></pre></div></div>

<p>vi로 coco.data 경로 맞춰주고 일부 수정한다면 아래와 같이 돌아가는 모습을 볼 수 있다.</p>

<p><img src="/public/img/yolo7.png" alt="yolo7" class="center" /></p>

<p>만약 학습말고 기존의 가중치로 결과를 확인하고 싶다면 아래와 같이 명령어를 입력하면 확인할 수 있다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.weights
./darknet detect cfg/yolov4.cfg yolov4.weights data/dog.jpg
</code></pre></div></div>

<p><img src="/public/img/yolo9.png" alt="yolo9" class="center" /></p>

<p>도커에서 실행한 이미지를 내 컴퓨터로 띄어서 확인할 수 있다.</p>

<p><img src="/public/img/yolo8.png" alt="yolo8" class="center" /></p>]]></content><author><name></name></author><category term="MachineLearning" /><summary type="html"><![CDATA[Docker환경에서 YOLOv4를 학습시키려고 한다. GPU로 돌릴 예정이기 때문에 Docker Hub에서 Nvidia CUDA 이미지를 사용했다.]]></summary></entry><entry><title type="html">가짜 상관관계(spurious correlation)란?</title><link href="http://localhost:4000/machinelearning/2022/08/14/spurious-correlation.html" rel="alternate" type="text/html" title="가짜 상관관계(spurious correlation)란?" /><published>2022-08-14T16:00:00+09:00</published><updated>2022-08-14T16:00:00+09:00</updated><id>http://localhost:4000/machinelearning/2022/08/14/spurious-correlation</id><content type="html" xml:base="http://localhost:4000/machinelearning/2022/08/14/spurious-correlation.html"><![CDATA[<h2 id="spurious-correlation">Spurious Correlation</h2>
<p>두 변수가 상관관계가 있다고 이야기 했지만, 알고보니 두 변수가 전혀 관계 없는 경우 Spurious Correlation이라고 말한다.</p>

<p>예를 들어 해변에서의 아이스크림 판매와 상어의 공격은 양의 상관관계가 있다.  <br />
아이스크림 판매의 증가함에 따라 상어의 공격 횟수가 증가했다고 한다.</p>

<p>그러나 상식적으로 생각했을 때, 아이스크림 판매는 상어의 공격과 전혀 상관없다. <br />
어떻게 이런 결과가 나올 수 있을까 ?</p>

<h3 id="confounding-variables">Confounding Variables</h3>

<p>해당 예시에서는 세 번째 변수가 해당 두 변수 사이에서 다른 상관 관계를 생성할 때 발생한다.</p>

<p>A가 증가하면 B와 C가 함께 증가한다. 따라서 B-&gt;C로 보이는 경우다.</p>

<p>예시의 아이스크림 판매의 경우 높아진 기온에 의해 더 많은 사람들이 아이스크림을 사거나 해변에서 수영하게 되어 상어의 공격 기회가 증가하게 되었을 뿐이다. 따라서 아이스크림 판매와 상어의 공격 사이에는 아무런 관련이 없음에도 불고하고 그래프로 표시하게 되면 함께 오르락 내리락 하는 경향이 있다.</p>

<h3 id="mediating-variables">Mediating Variables</h3>

<p>다른 경우는 일련의 상관관계가 가짜 상관관계를 만든다.<br />
예를들어 A-&gt;B-&gt;C 일 경우인데, A와 C의 값만 있으면 상관관계를 만들수 있다. 실제로는 A와 C사이에는 직접적인 연결이 없음에도 가짜 상관관계 현상을 볼 수 있다.</p>

<h3 id="random-sampling-error">Random Sampling Error</h3>

<p>모집단에서 추출한 어떠한 표본을 사용하여 연구한다고 해보자.<br />
해당 표본에서 찾은 상관관계가 모집단에 존재하지 않을 수 있다.</p>

<h3 id="solution">Solution</h3>

<p>그럼 가짜 상관관계를 어떻게 파악할 수 있을까 ? <br />
아쉽게도 가짜 상관관계의 경우 단번에 파악할 수 있는 것은 없어서 직접 통계적인 방법이나 실험적 방법, 다양한 그래프를 그려가며 이 상관관계가 진짜인지 가짜인지 연구하는 방법뿐이다.</p>

<p>참고로 다중공선성(multicollinearity)의 경우는 독립변수들간의 상관관계가 강하게 나타나서 회귀분석의 전체가정인 독립변수들간에 상관관계가 높으면 안된다는 조건을 위배하는 경우를 의미하기 때문에 spurious correlation과 다른 문제임을 기억하자.</p>]]></content><author><name></name></author><category term="MachineLearning" /><summary type="html"><![CDATA[Spurious Correlation 두 변수가 상관관계가 있다고 이야기 했지만, 알고보니 두 변수가 전혀 관계 없는 경우 Spurious Correlation이라고 말한다.]]></summary></entry><entry><title type="html">머신러닝에서 추론과 예측</title><link href="http://localhost:4000/machinelearning/2022/08/11/ml-predict-inference.html" rel="alternate" type="text/html" title="머신러닝에서 추론과 예측" /><published>2022-08-11T16:00:00+09:00</published><updated>2022-08-11T16:00:00+09:00</updated><id>http://localhost:4000/machinelearning/2022/08/11/ml-predict-inference</id><content type="html" xml:base="http://localhost:4000/machinelearning/2022/08/11/ml-predict-inference.html"><![CDATA[<p>머신러닝 개발자로 일을하다보면, “예측”과 “추론” 이라는 단어를 많이 듣는다. 
이 둘의 차이가 무엇일까?</p>

<h2 id="예측">예측</h2>

<p>예측은 미래 가치를 추정하는 값을 말한다.<br />
예를 들어 주식 예측, 집값 예측, 버스 도착 시간 예측 등이 있을 수 있다.</p>

<p>그리고 예측에는 온라인 예측과 배치 예측 두가지 종류가 있다.</p>

<ul>
  <li>온라인 예측(oneline prediction)은 거의 실시간으로 적은 수의 예측값을 얻고자할 때 사용된다.</li>
  <li>배치 예측(batch prediction)은 오프라인에서 많은 양의 데이터에 대한 예측을 생성하는 것을 말한다.</li>
</ul>

<p>온라인 예측의 경우 어떻게 사용할 수 있을까?</p>

<p>쉽게 생각하면 인스타그램에서 사용될 수 있는데, 예를 들어 내가 어떠한 해시태그를 검색 했을 때, 실시간 데이터에 의해 30분 후 관련 추천 게시물이 나에게 뜨는 것이 예로 볼 수 있다.</p>

<p><img src="/public/img/oneline.png" alt="oneline" class="center" /></p>
<center>30분마다 데이터를 받아서 예측하는 모델이라 가정</center>
<p><br />
배치 예측 작업은 많은 양의 데이터에 대한 예측을 분석할 때 유용하다. 배치 예측은 온라인 예측보다 더 많은 데이터를 다루기 때문에 배치 예측이 온라인 예측보다 오래걸린다.</p>

<h2 id="추론">추론</h2>

<p>그렇다면 추론은 무엇일까?</p>

<p>우리는 이미지를 분류하거나, 텍스트 리뷰에 대한 감정 분류와 같은 모델을 보고 예측이라는 말을 사용하지 않는다.<br />
예측은 미래를 뜻하는 단어이기 때문이기 때문에 ‘예측’이라는 용어를 사용하긴 어렵다. 이런 경우에는 ‘예측’이라는 용어를 대체할 수 있는 ‘추론’이라는 용어를 사용한다.</p>

<p><img src="/public/img/inference.png" alt="inference" class="center" /></p>]]></content><author><name></name></author><category term="MachineLearning" /><summary type="html"><![CDATA[머신러닝 개발자로 일을하다보면, “예측”과 “추론” 이라는 단어를 많이 듣는다. 이 둘의 차이가 무엇일까?]]></summary></entry><entry><title type="html">Deep Learning에서의 DAG구조</title><link href="http://localhost:4000/machinelearning/2022/08/10/ml-directed-acyclic-graph.html" rel="alternate" type="text/html" title="Deep Learning에서의 DAG구조" /><published>2022-08-10T16:00:00+09:00</published><updated>2022-08-10T16:00:00+09:00</updated><id>http://localhost:4000/machinelearning/2022/08/10/ml-directed-acyclic-graph</id><content type="html" xml:base="http://localhost:4000/machinelearning/2022/08/10/ml-directed-acyclic-graph.html"><![CDATA[<p>DAG는 Directed Acyclic Graph의 약자이다. <br />
순환 그래프가 아닌 비순환 그래프를 말하며, 순환하는 싸이클은 존재하지 않고 일방향성만 가진다.<br />
그래프 종류와 딥러닝에서의 DAG구조에 대해 알아보자.</p>

<h2 id="graph-종류">Graph 종류</h2>

<p>그래프에 대해 전부 다루게 되면 논점이 흐리게 될 것 같아, 무방향 그래프(Undirected Graph)와 방향 그래프(Directed Graph)만 간단하게 다룰 것이다.</p>

<h3 id="무방향-그래프-undirected-graph">무방향 그래프 (Undirected Graph)</h3>

<p>무방향 그래프는 말 그대로 방향이 없는 그래프를 말한다.<br />
간선을 통해 노드는 양방향으로 갈 수 있다.</p>

<p><img src="/public/img/DAG1.png" alt="DAG1" width="40%" class="center" /></p>

<h3 id="방향-그래프-directed-graph">방향 그래프 (Directed Graph)</h3>

<p>방향 그래프는 간선에 방향이 있는 그래프를 말한다.</p>

<p><img src="/public/img/DAG2.png" alt="DAG2" width="40%" class="center" /></p>

<h3 id="사이클cycle과-비순환-그래프-acyclic-graph">사이클(Cycle)과 비순환 그래프 (Acyclic Graph)</h3>

<p>사이클은 단순 경로의 시작 노드와 종료 노드가 동일할 경우를 말하고 비순환 그래프는 사이클이 없는 그래프를 말한다.</p>

<p><img src="/public/img/DAG3.png" alt="DAG3" width="70%" class="center" /></p>
<center>(좌)비순환 그래프 / (우)사이클 </center>

<h2 id="directed-acyclic-graph">Directed Acyclic Graph</h2>

<p>DAG는 비순환 그래프를 말하며, 순환하는 사이클이 존재하지 않고 일방향성만 가진다.</p>

<p><img src="/public/img/DAG4.png" alt="DAG4" width="60%" class="center" /></p>

<p>순환한다는 것은 출발한 노드에서 시작하여 끝내 다시 시작노드로 돌아가는 것이 순환 반복될 수 있는 그래프인데, 
위 그래프처럼 다시 되돌아갈 간선이 없는 그래프라면 비순환 그래프라고 한다.</p>

<h2 id="deep-learning-dag">Deep Learning DAG</h2>

<p>일반적으로 DAG는 작업들의 우선순위를 표현할 때, DAG구조를 사용한다.<br />
예를 들어 공장에서 작업 스케줄링을 할 때, A라는 작업이 끝나고 B를 해야하고 B가 끝난 다음에는 C,D를 해야한다는 것을 DAG로 표현할 수 있다.</p>

<p>딥러닝에서는 여러 개의 Task로 나뉘어서 순차적으로 실행할 필요가 있다. 만약 DAG가 아닌 사이클 구조를 가진다면 그 작업은 영원히 완수되기 어렵기 때문이다. 따라서 작업간의 순서를 그래프로 표현할때는 DAG로 표현하는 것이 일반적이다.</p>

<p><img src="/public/img/DAG5.png" alt="DAG5" class="center" /></p>

<p>요즘은 이런 작업 흐름을 관리하기 위해 workflow 도구가 나와있으며 그 중 하나인 Airflow는 Graph View 기능을 제공한다.</p>]]></content><author><name></name></author><category term="MachineLearning" /><summary type="html"><![CDATA[DAG는 Directed Acyclic Graph의 약자이다. 순환 그래프가 아닌 비순환 그래프를 말하며, 순환하는 싸이클은 존재하지 않고 일방향성만 가진다. 그래프 종류와 딥러닝에서의 DAG구조에 대해 알아보자.]]></summary></entry></feed>