<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-09-06T00:50:42+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Eunji Kim</title><subtitle>양념치킨🍗 좋아하는 개발자</subtitle><entry><title type="html">Django - 로그인 페이지 구현하기</title><link href="http://localhost:4000/toyproject/2022/09/04/django-login.html" rel="alternate" type="text/html" title="Django - 로그인 페이지 구현하기" /><published>2022-09-04T06:00:00+09:00</published><updated>2022-09-04T06:00:00+09:00</updated><id>http://localhost:4000/toyproject/2022/09/04/django-login</id><content type="html" xml:base="http://localhost:4000/toyproject/2022/09/04/django-login.html"><![CDATA[<p>우선 최종적으로 구현된 로그인 페이지는 아래와 같습니다.</p>

<p><img src="/public/img/django4.png" alt="django4" class="center" /></p>

<p>로그인 페이지에서 값 입력 후 <code class="highlighter-rouge">Login</code>을 누르면 <code class="highlighter-rouge">Home</code>으로 넘어가는 부분을 구현 해보도록 하겠습니다.  기본적으로 장고에서 로그인 기능을 제공해주기 때문에 로그인 폼을 가져오고 CSS를 입혀보겠습니다.</p>

<h2 id="settings">Settings</h2>

<p>우선 <a href="https://django-crispy-forms.readthedocs.io/en/latest/template_packs.html#template-packs">Django 라이브러리</a>를 설치합니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install django-crispy-forms
</code></pre></div></div>

<p>설치 후 아래와 같이 파일을 수정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># settings.py
</span>
<span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">'django.contrib.admin'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth'</span><span class="p">,</span>
    <span class="s">'django.contrib.contenttypes'</span><span class="p">,</span>
    <span class="s">'django.contrib.sessions'</span><span class="p">,</span>
    <span class="s">'django.contrib.messages'</span><span class="p">,</span>
    <span class="s">'django.contrib.staticfiles'</span><span class="p">,</span>
    <span class="s">'crispy_forms'</span><span class="p">,</span> <span class="c1"># 추가 
</span>    <span class="s">'accounts.apps.AccountsConfig'</span><span class="p">,</span> <span class="c1"># 앱 추가 
</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="login-html">Login html</h2>

<p>아래와 같이 <code class="highlighter-rouge">login.html</code> 을 만들었습니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"static/css/style.css"</span><span class="nt">&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"wrapper"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"title"</span><span class="nt">&gt;</span>
      Login
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"input_wrap"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"error_msg"</span><span class="nt">&gt;</span>Incorrect username or password. Please try again<span class="nt">&lt;/span&gt;</span>
          {"%" csrf_token "%"}
          {"{"login_form"}"}
      <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"btn disabled input_wrap"</span> <span class="na">style=</span><span class="s">"padding: 15px"</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="nt">&gt;</span>Login<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
      <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"text-center"</span><span class="nt">&gt;</span>Don't have an account? <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/register"</span><span class="nt">&gt;</span>Create an account<span class="nt">&lt;/a&gt;</span>.<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>위 코드에서 <code class="highlighter-rouge">{"%" csrf_token "%"}, {"{"login_form"}"}</code>에서 따옴표는 제거하고 사용해주세요.<br />
참고로 저는아래와 같은 파일구조로 되어 있습니다.</p>

<p><img src="/public/img/django5.png" alt="django5" class="center" /></p>

<h2 id="login-url">Login URL</h2>

<p>전 첫 화면에 무조건 로그인 화면이 나오기를 바라기 때문에 아래와 같이 URL을 만들었습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">app_name</span> <span class="o">=</span> <span class="s">"accounts"</span> 

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">login_request</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"login"</span><span class="p">),</span> <span class="c1"># 로그인 페이지
</span>    <span class="n">path</span><span class="p">(</span><span class="s">"home/"</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">home_request</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"home"</span><span class="p">),</span> <span class="c1"># 홈 화면 페이지 
</span>    <span class="n">path</span><span class="p">(</span><span class="s">"register/"</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">register_request</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"register"</span><span class="p">),</span> <span class="c1"># 회원가입 페이지
</span><span class="p">]</span>
</code></pre></div></div>

<h2 id="login-form">Login Form</h2>

<p><code class="highlighter-rouge">views.py</code>에 아래와 같이 코드를 추가합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span><span class="p">,</span> <span class="n">redirect</span>
<span class="kn">from</span> <span class="nn">django.contrib.auth</span> <span class="kn">import</span> <span class="n">login</span><span class="p">,</span> <span class="n">authenticate</span>
<span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">messages</span>
<span class="kn">from</span> <span class="nn">django.contrib.auth.forms</span> <span class="kn">import</span> <span class="n">AuthenticationForm</span>


<span class="c1"># 홈 화면 
</span><span class="k">def</span> <span class="nf">home_request</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="o">=</span><span class="n">request</span><span class="p">,</span> <span class="n">template_name</span><span class="o">=</span><span class="s">"main/home.html"</span><span class="p">)</span>

<span class="c1"># 로그인 화면 
</span><span class="k">def</span> <span class="nf">login_request</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">"POST"</span><span class="p">:</span>
        <span class="n">form</span> <span class="o">=</span> <span class="n">AuthenticationForm</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">form</span><span class="p">.</span><span class="n">is_valid</span><span class="p">():</span>
            <span class="n">username</span> <span class="o">=</span> <span class="n">form</span><span class="p">.</span><span class="n">cleaned_data</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'username'</span><span class="p">)</span>
            <span class="n">password</span> <span class="o">=</span> <span class="n">form</span><span class="p">.</span><span class="n">cleaned_data</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'password'</span><span class="p">)</span>
            <span class="n">user</span> <span class="o">=</span> <span class="n">authenticate</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="n">password</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">user</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">login</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">user</span><span class="p">)</span>
                <span class="n">messages</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="sa">f</span><span class="s">"You are now logged in as </span><span class="si">{</span><span class="n">username</span><span class="si">}</span><span class="s">."</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">"/home"</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">messages</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="s">"Invalid username or password."</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">messages</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="s">"Invalid username or password."</span><span class="p">)</span>
    <span class="n">form</span> <span class="o">=</span> <span class="n">AuthenticationForm</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="o">=</span><span class="n">request</span><span class="p">,</span> <span class="n">template_name</span><span class="o">=</span><span class="s">"main/login.html"</span><span class="p">,</span> <span class="n">context</span><span class="o">=</span><span class="p">{</span><span class="s">"login_form"</span><span class="p">:</span><span class="n">form</span><span class="p">})</span>
</code></pre></div></div>

<p>저는 로그인 성공되면 홈 화면이 나올 수 있도록 <code class="highlighter-rouge">redirect('/home')</code>으로 작성하였습니다.</p>

<h2 id="login-css">Login CSS</h2>

<p>로그인 CSS는 아래와 같고, 만약에 아래의 CSS가 적용이 되지 않는다면, 경로 확인 부탁드려요~!</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@import</span> <span class="sx">url('https://fonts.googleapis.com/css2?family=Jost:wght@400;700&amp;display=swap')</span><span class="p">;</span>

<span class="o">*</span><span class="p">{</span>
	<span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
	<span class="nl">padding</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
	<span class="nl">box-sizing</span><span class="p">:</span> <span class="n">border-box</span><span class="p">;</span>
	<span class="nl">font-family</span><span class="p">:</span> <span class="s2">'Jost'</span><span class="p">,</span> <span class="nb">sans-serif</span><span class="p">;</span>
	<span class="nl">outline</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
	<span class="nl">color</span><span class="p">:</span> <span class="m">#000000</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">body</span><span class="p">{</span>
	<span class="nl">background</span><span class="p">:</span> <span class="n">linear-gradient</span><span class="p">(</span><span class="n">to</span> <span class="nb">right</span><span class="p">,</span> <span class="m">#f4b661</span><span class="p">,</span> <span class="m">#f16160</span><span class="p">);</span>
<span class="p">}</span>

<span class="nc">.wrapper</span><span class="p">{</span>
	<span class="nl">min-height</span><span class="p">:</span> <span class="m">100vh</span><span class="p">;</span>
	<span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
	<span class="nl">justify-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
	<span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span><span class="p">{</span>
	<span class="nl">width</span><span class="p">:</span> <span class="m">425px</span><span class="p">;</span>
	<span class="nl">height</span><span class="p">:</span> <span class="nb">auto</span><span class="p">;</span>
	<span class="nl">background</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
	<span class="nl">padding</span><span class="p">:</span> <span class="m">35px</span> <span class="m">50px</span><span class="p">;</span>
	<span class="nl">border-radius</span><span class="p">:</span> <span class="m">2px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span> <span class="nc">.title</span><span class="p">{</span>
	<span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
	<span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span>
	<span class="nl">font-weight</span><span class="p">:</span> <span class="m">700</span><span class="p">;</span>
	<span class="nl">font-size</span><span class="p">:</span> <span class="m">24px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span> <span class="nc">.input_wrap</span><span class="p">{</span>
	<span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span>
	<span class="nl">width</span><span class="p">:</span> <span class="m">325px</span><span class="p">;</span>
	<span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span> <span class="nc">.input_wrap</span><span class="nd">:last-child</span><span class="p">{</span>
	<span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span> <span class="nc">.input_wrap</span> <span class="nt">label</span><span class="p">{</span>
	<span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
	<span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">5px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span> <span class="nc">.input_wrap</span> <span class="nt">input</span><span class="p">{</span>
	<span class="nl">padding</span><span class="p">:</span> <span class="m">15px</span><span class="p">;</span>
	<span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
	<span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="m">#bdc1c6</span><span class="p">;</span>
	<span class="nl">font-size</span><span class="p">:</span> <span class="m">16px</span><span class="p">;</span>
	<span class="nl">border-radius</span><span class="p">:</span> <span class="m">3px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span> <span class="nc">.input_wrap</span> <span class="nc">.input</span><span class="p">{</span>
	<span class="nl">background</span><span class="p">:</span> <span class="m">#f5f4f4</span><span class="p">;</span>
	<span class="nl">padding-right</span><span class="p">:</span> <span class="m">35px</span><span class="p">;</span>
<span class="p">}</span>


<span class="nc">.form</span> <span class="nc">.input_wrap</span> <span class="nc">.input</span><span class="nd">:focus</span><span class="p">{</span>
	<span class="nl">border-color</span><span class="p">:</span> <span class="m">#1dbf73</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span> <span class="nc">.input_wrap</span> <span class="nc">.input_field</span><span class="p">{</span>
	<span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span> <span class="nc">.input_wrap</span> <span class="nc">.btn</span><span class="p">{</span>
	<span class="nl">text-transform</span><span class="p">:</span> <span class="nb">uppercase</span><span class="p">;</span>
	<span class="nl">letter-spacing</span><span class="p">:</span> <span class="m">3px</span><span class="p">;</span>
	<span class="nl">color</span><span class="p">:</span> <span class="m">#fff</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span> <span class="nc">.input_wrap</span> <span class="nc">.btn.disabled</span><span class="p">{</span>
	<span class="nl">background</span><span class="p">:</span> <span class="m">#F0F0F0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span> <span class="nc">.input_wrap</span> <span class="nc">.btn.enabled</span><span class="p">{</span>
	<span class="nl">background</span><span class="p">:</span> <span class="m">#1dbf73</span><span class="p">;</span>
	<span class="nl">cursor</span><span class="p">:</span> <span class="nb">pointer</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.form</span> <span class="nc">.input_wrap</span> <span class="nc">.error_msg</span><span class="p">{</span>
	<span class="nl">font-size</span><span class="p">:</span> <span class="m">15px</span><span class="p">;</span>
	<span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">5px</span><span class="p">;</span>
	<span class="nl">color</span><span class="p">:</span> <span class="m">#f74040</span><span class="p">;</span>
	<span class="nl">display</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이제 로그인 화면이 완성되었고, 다음에는 회원가입 기능을 추가해보도록 하겠습니다.</p>]]></content><author><name></name></author><category term="ToyProject" /><summary type="html"><![CDATA[우선 최종적으로 구현된 로그인 페이지는 아래와 같습니다.]]></summary></entry><entry><title type="html">Django - 관리자 페이지 구현하기</title><link href="http://localhost:4000/toyproject/2022/09/03/django-admin.html" rel="alternate" type="text/html" title="Django - 관리자 페이지 구현하기" /><published>2022-09-03T15:00:00+09:00</published><updated>2022-09-03T15:00:00+09:00</updated><id>http://localhost:4000/toyproject/2022/09/03/django-admin</id><content type="html" xml:base="http://localhost:4000/toyproject/2022/09/03/django-admin.html"><![CDATA[<p>이번 포스팅에서는 관리자 페이지 구현에 대해 다루어보겠습니다.</p>

<h2 id="django-관리자-페이지">Django 관리자 페이지</h2>

<p>Django는 많은 기능을 제공하는데, 그 중 관리자 페이지도 기본적으로 제공됩니다.<br />
그렇기 때문에 많은 작업을 하실 필요는 없습니다.</p>

<p>아래의 명령어를 실행해서 슈퍼유저를 생성합니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python manage.py migrate 
python manage.py createsuperuser
</code></pre></div></div>

<p>Username, Email address, Password 입력까지 끝냈다면 http://127.0.0.1:8000/admin 으로 들어가면 아래와 같은 화면을 볼 수 있습니다.</p>

<p><img src="/public/img/django2.png" alt="django2" width="60%" height="60%" class="center" /></p>

<p>로그인하면 아래와 같은 화면을 볼 수 있으며 여기서 유저 추가, 유저 권한 부여도 가능합니다.</p>

<p><img src="/public/img/django3.png" alt="django3" class="center" /></p>

<p>관리자 인증 문제가 있어서 다른 컴퓨터로 관리자 로그인이 안될 때가 있어서 <code class="highlighter-rouge">settings.py</code>에 아래 코드를 추가해줍니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># settings.py
</span><span class="n">AUTHENTICATION_BACKENDS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">'django.contrib.auth.backends.ModelBackend'</span><span class="p">,</span>
<span class="p">]</span>
</code></pre></div></div>

<p>이제 어디서든 관리자 페이지에서 로그인이 가능합니다.</p>]]></content><author><name></name></author><category term="ToyProject" /><summary type="html"><![CDATA[이번 포스팅에서는 관리자 페이지 구현에 대해 다루어보겠습니다.]]></summary></entry><entry><title type="html">Django - 프로젝트 생성하기</title><link href="http://localhost:4000/toyproject/2022/09/03/django-startproject.html" rel="alternate" type="text/html" title="Django - 프로젝트 생성하기" /><published>2022-09-03T14:00:00+09:00</published><updated>2022-09-03T14:00:00+09:00</updated><id>http://localhost:4000/toyproject/2022/09/03/django-startproject</id><content type="html" xml:base="http://localhost:4000/toyproject/2022/09/03/django-startproject.html"><![CDATA[<p>이번 포스팅에서는 장고 프로젝트를 생성해보도록 하겠습니다.</p>

<h2 id="django-프로젝트-생성">Django 프로젝트 생성</h2>

<p>장고가 설치되어 있지 않다면 아래 명령어로 설치해주세요.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python -m pip install Django
</code></pre></div></div>

<p>프로젝트는 아래와 같이 생성합니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>django-admin startproject LabelingTools
</code></pre></div></div>

<p>저는 <code class="highlighter-rouge">LabelingTools</code> 이라는 이름으로 프로젝트를 생성했습니다.</p>

<h3 id="django-setting">Django Setting</h3>

<p>처음에 세팅해야 하는 부분은 아래와 같습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#settings.py
</span><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">'django.contrib.admin'</span><span class="p">,</span>  
    <span class="s">'django.contrib.auth'</span><span class="p">,</span> 
    <span class="s">''</span> <span class="c1"># 앱이 있으면 이름 추가 
</span><span class="p">]</span>

<span class="p">...</span>

<span class="c1"># LANGUAGE_CODE = 'en-us'
</span><span class="n">LANGUAGE_CODE</span> <span class="o">=</span> <span class="s">'ko'</span> <span class="c1"># 한글로 보고싶으면 언어설정 해주기
</span></code></pre></div></div>

<p>프로젝트가 제대로 동작하는지 확인하려면 <code class="highlighter-rouge">manage.py</code> 파일이 있는 위치에서 아래와 같이 명령어로 실행합니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python manage.py runserver
</code></pre></div></div>

<p><img src="/public/img/django1-1.png" alt="django1-1" class="center" /></p>

<p>기본 포트는 8000번이지만, 포트를 변경하고 싶다면 아래와 같이 수정하여 사용할 수 있습니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python manage.py runserver 8080 
# 또는 
python manage.py runserver 0:8080 
</code></pre></div></div>

<p>추가로 매번 <code class="highlighter-rouge">python manage.py runserver</code>를 치는 것이 불편하여 bat파일을 작성해줍니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@echo off
echo ===============Run Django===================
python ./LabelingTools/manage.py runserver
</code></pre></div></div>

<p>저는 앞으로 <code class="highlighter-rouge">python manage.py runserver</code> 라는 명령어 대신 <code class="highlighter-rouge">call run.bat</code>을 입력하면 장고가 실행됩니다.</p>

<p><img src="/public/img/django1.png" alt="django1" width="60%" height="60%" class="center" /></p>]]></content><author><name></name></author><category term="ToyProject" /><summary type="html"><![CDATA[이번 포스팅에서는 장고 프로젝트를 생성해보도록 하겠습니다.]]></summary></entry><entry><title type="html">Docker와 YOLOv4 사용하기</title><link href="http://localhost:4000/machinelearning/2022/08/20/docker-yolo4.html" rel="alternate" type="text/html" title="Docker와 YOLOv4 사용하기" /><published>2022-08-20T16:00:00+09:00</published><updated>2022-08-20T16:00:00+09:00</updated><id>http://localhost:4000/machinelearning/2022/08/20/docker-yolo4</id><content type="html" xml:base="http://localhost:4000/machinelearning/2022/08/20/docker-yolo4.html"><![CDATA[<p>Docker환경에서 YOLOv4를 학습시키려고 한다.<br />
GPU로 돌릴 예정이기 때문에 Docker Hub에서 <a href="https://hub.docker.com/r/nvidia/cuda">Nvidia CUDA</a> 이미지를 사용했다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull nvidia/cuda:11.6.0-cudnn8-devel-ubuntu20.04
</code></pre></div></div>

<p>버전은 각자 컴퓨터 사양에 맞게 하면 되는데 나는 11.6 버전으로 진행하였다. 해당 이미지는 cudnn까지 설치되어 있어서 따로 cudnn까지 설치는 하지 않아도 된다.</p>

<p><img src="/public/img/yolo1.png" alt="yolo1" class="center" /></p>

<p>이미지를 실행 시킬때 <code class="highlighter-rouge">--runtime=nvidia</code> 라던가 <code class="highlighter-rouge">--gpus</code> 옵션을 사용하지 않는다면 cpu로 돌아가니 주의하자.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run -it --gpus all -e DISPLAY=unix$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix --privileged nvidia/cuda:11.6.0-cudnn8-devel-ubuntu20.04
</code></pre></div></div>

<p>나는 Docker에서 yolo를 돌리면서 이미지나 그래프를 확인하고 싶어서 내 화면에 띄우기 위해 DISPLAY 옵션을 넣었다. 나처럼 도커에서 실행한 이미지결과를 확인하고 싶다면 
<a href="https://sourceforge.net/projects/xming/">Xming X Server for Windows</a>를 설치, 도커 실행 후 <code class="highlighter-rouge">apt-get install x11-apps</code> 와 <code class="highlighter-rouge">export DISPLAY=WINDOWS_IP:0.0</code> 를 해주면 된다.</p>

<p>이미지 실행 후 <code class="highlighter-rouge">nvidia-smi</code> 와 <code class="highlighter-rouge">nvcc -V</code>으로 CUDA가 잘 잡히는지 확인하자.</p>

<p><img src="/public/img/yolo2.png" alt="yolo2" class="center" /></p>

<p>참고로 <code class="highlighter-rouge">nvidia-smi</code> 에서 보이는 CUDA Version의 경우에는 현재 driver와 호환이 잘되는 CUDA버전을 추천해주는 것이지 현재의 CUDA 버전을 이야기하는 것은 아니다. 그래서 <code class="highlighter-rouge">nvcc -V</code>로 현재의 버전을 보면 된다.</p>

<p>이제 yolo를 사용하기 위해 아래와 같이 <a href="https://github.com/AlexeyAB/darknet">Git clone</a> 받자</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get update
apt install git
apt install vim
apt install wget
sudo apt-get install libopencv-dev # opencv=0으로 할꺼면 빼도 된다.
git clone https://github.com/AlexeyAB/darknet.git
</code></pre></div></div>

<p>아래와 같이 파일이 들어와 있다면 잘 된 것이다</p>

<p><img src="/public/img/yolo3.png" alt="yolo3" class="center" /></p>

<p>우선 Makefile을 아래와 수정하자.</p>

<p><img src="/public/img/yolo4.png" alt="yolo4" class="center" /></p>

<p>그리고 <code class="highlighter-rouge">make</code> 를 입력하면 아래와 같이 <code class="highlighter-rouge">darknet</code> 파일이 생기는 것을 볼 수 있다.</p>

<p><img src="/public/img/yolo5.png" alt="yolo5" class="center" /></p>

<p>가중치 파일을 다운 받아야하는데 나는 <code class="highlighter-rouge">yolov4.conv.137</code> 를 사용하였다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.conv.137
</code></pre></div></div>

<p><img src="/public/img/yolo6.png" alt="yolo6" class="center" /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./darknet detector train cfg/coco.data cfg/yolov4.cfg yolov4.conv.137
</code></pre></div></div>

<p>vi로 coco.data 경로 맞춰주고 일부 수정한다면 아래와 같이 돌아가는 모습을 볼 수 있다.</p>

<p><img src="/public/img/yolo7.png" alt="yolo7" class="center" /></p>

<p>만약 학습말고 기존의 가중치로 결과를 확인하고 싶다면 아래와 같이 명령어를 입력하면 확인할 수 있다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.weights
./darknet detect cfg/yolov4.cfg yolov4.weights data/dog.jpg
</code></pre></div></div>

<p><img src="/public/img/yolo9.png" alt="yolo9" class="center" /></p>

<p>도커에서 실행한 이미지를 내 컴퓨터로 띄어서 확인할 수 있다.</p>

<p><img src="/public/img/yolo8.png" alt="yolo8" class="center" /></p>]]></content><author><name></name></author><category term="MachineLearning" /><summary type="html"><![CDATA[Docker환경에서 YOLOv4를 학습시키려고 한다. GPU로 돌릴 예정이기 때문에 Docker Hub에서 Nvidia CUDA 이미지를 사용했다.]]></summary></entry><entry><title type="html">가짜 상관관계(spurious correlation)란?</title><link href="http://localhost:4000/machinelearning/2022/08/14/spurious-correlation.html" rel="alternate" type="text/html" title="가짜 상관관계(spurious correlation)란?" /><published>2022-08-14T16:00:00+09:00</published><updated>2022-08-14T16:00:00+09:00</updated><id>http://localhost:4000/machinelearning/2022/08/14/spurious-correlation</id><content type="html" xml:base="http://localhost:4000/machinelearning/2022/08/14/spurious-correlation.html"><![CDATA[<h2 id="spurious-correlation">Spurious Correlation</h2>
<p>두 변수가 상관관계가 있다고 이야기 했지만, 알고보니 두 변수가 전혀 관계 없는 경우 Spurious Correlation이라고 말한다.</p>

<p>예를 들어 해변에서의 아이스크림 판매와 상어의 공격은 양의 상관관계가 있다.  <br />
아이스크림 판매의 증가함에 따라 상어의 공격 횟수가 증가했다고 한다.</p>

<p>그러나 상식적으로 생각했을 때, 아이스크림 판매는 상어의 공격과 전혀 상관없다. <br />
어떻게 이런 결과가 나올 수 있을까 ?</p>

<h3 id="confounding-variables">Confounding Variables</h3>

<p>해당 예시에서는 세 번째 변수가 해당 두 변수 사이에서 다른 상관 관계를 생성할 때 발생한다.</p>

<p>A가 증가하면 B와 C가 함께 증가한다. 따라서 B-&gt;C로 보이는 경우다.</p>

<p>예시의 아이스크림 판매의 경우 높아진 기온에 의해 더 많은 사람들이 아이스크림을 사거나 해변에서 수영하게 되어 상어의 공격 기회가 증가하게 되었을 뿐이다. 따라서 아이스크림 판매와 상어의 공격 사이에는 아무런 관련이 없음에도 불고하고 그래프로 표시하게 되면 함께 오르락 내리락 하는 경향이 있다.</p>

<h3 id="mediating-variables">Mediating Variables</h3>

<p>다른 경우는 일련의 상관관계가 가짜 상관관계를 만든다.<br />
예를들어 A-&gt;B-&gt;C 일 경우인데, A와 C의 값만 있으면 상관관계를 만들수 있다. 실제로는 A와 C사이에는 직접적인 연결이 없음에도 가짜 상관관계 현상을 볼 수 있다.</p>

<h3 id="random-sampling-error">Random Sampling Error</h3>

<p>모집단에서 추출한 어떠한 표본을 사용하여 연구한다고 해보자.<br />
해당 표본에서 찾은 상관관계가 모집단에 존재하지 않을 수 있다.</p>

<h3 id="solution">Solution</h3>

<p>그럼 가짜 상관관계를 어떻게 파악할 수 있을까 ? <br />
아쉽게도 가짜 상관관계의 경우 단번에 파악할 수 있는 것은 없어서 직접 통계적인 방법이나 실험적 방법, 다양한 그래프를 그려가며 이 상관관계가 진짜인지 가짜인지 연구하는 방법뿐이다.</p>

<p>참고로 다중공선성(multicollinearity)의 경우는 독립변수들간의 상관관계가 강하게 나타나서 회귀분석의 전체가정인 독립변수들간에 상관관계가 높으면 안된다는 조건을 위배하는 경우를 의미하기 때문에 spurious correlation과 다른 문제임을 기억하자.</p>]]></content><author><name></name></author><category term="MachineLearning" /><summary type="html"><![CDATA[Spurious Correlation 두 변수가 상관관계가 있다고 이야기 했지만, 알고보니 두 변수가 전혀 관계 없는 경우 Spurious Correlation이라고 말한다.]]></summary></entry><entry><title type="html">머신러닝에서 추론과 예측</title><link href="http://localhost:4000/machinelearning/2022/08/11/ml-predict-inference.html" rel="alternate" type="text/html" title="머신러닝에서 추론과 예측" /><published>2022-08-11T16:00:00+09:00</published><updated>2022-08-11T16:00:00+09:00</updated><id>http://localhost:4000/machinelearning/2022/08/11/ml-predict-inference</id><content type="html" xml:base="http://localhost:4000/machinelearning/2022/08/11/ml-predict-inference.html"><![CDATA[<p>머신러닝 개발자로 일을하다보면, “예측”과 “추론” 이라는 단어를 많이 듣는다. 
이 둘의 차이가 무엇일까?</p>

<h2 id="예측">예측</h2>

<p>예측은 미래 가치를 추정하는 값을 말한다.<br />
예를 들어 주식 예측, 집값 예측, 버스 도착 시간 예측 등이 있을 수 있다.</p>

<p>그리고 예측에는 온라인 예측과 배치 예측 두가지 종류가 있다.</p>

<ul>
  <li>온라인 예측(oneline prediction)은 거의 실시간으로 적은 수의 예측값을 얻고자할 때 사용된다.</li>
  <li>배치 예측(batch prediction)은 오프라인에서 많은 양의 데이터에 대한 예측을 생성하는 것을 말한다.</li>
</ul>

<p>온라인 예측의 경우 어떻게 사용할 수 있을까?</p>

<p>쉽게 생각하면 인스타그램에서 사용될 수 있는데, 예를 들어 내가 어떠한 해시태그를 검색 했을 때, 실시간 데이터에 의해 30분 후 관련 추천 게시물이 나에게 뜨는 것이 예로 볼 수 있다.</p>

<p><img src="/public/img/oneline.png" alt="oneline" class="center" /></p>
<center>30분마다 데이터를 받아서 예측하는 모델이라 가정</center>
<p><br />
배치 예측 작업은 많은 양의 데이터에 대한 예측을 분석할 때 유용하다. 배치 예측은 온라인 예측보다 더 많은 데이터를 다루기 때문에 배치 예측이 온라인 예측보다 오래걸린다.</p>

<h2 id="추론">추론</h2>

<p>그렇다면 추론은 무엇일까?</p>

<p>우리는 이미지를 분류하거나, 텍스트 리뷰에 대한 감정 분류와 같은 모델을 보고 예측이라는 말을 사용하지 않는다.<br />
예측은 미래를 뜻하는 단어이기 때문이기 때문에 ‘예측’이라는 용어를 사용하긴 어렵다. 이런 경우에는 ‘예측’이라는 용어를 대체할 수 있는 ‘추론’이라는 용어를 사용한다.</p>

<p><img src="/public/img/inference.png" alt="inference" class="center" /></p>]]></content><author><name></name></author><category term="MachineLearning" /><summary type="html"><![CDATA[머신러닝 개발자로 일을하다보면, “예측”과 “추론” 이라는 단어를 많이 듣는다. 이 둘의 차이가 무엇일까?]]></summary></entry><entry><title type="html">Deep Learning에서의 DAG구조</title><link href="http://localhost:4000/machinelearning/2022/08/10/ml-directed-acyclic-graph.html" rel="alternate" type="text/html" title="Deep Learning에서의 DAG구조" /><published>2022-08-10T16:00:00+09:00</published><updated>2022-08-10T16:00:00+09:00</updated><id>http://localhost:4000/machinelearning/2022/08/10/ml-directed-acyclic-graph</id><content type="html" xml:base="http://localhost:4000/machinelearning/2022/08/10/ml-directed-acyclic-graph.html"><![CDATA[<p>DAG는 Directed Acyclic Graph의 약자이다. <br />
순환 그래프가 아닌 비순환 그래프를 말하며, 순환하는 싸이클은 존재하지 않고 일방향성만 가진다.<br />
그래프 종류와 딥러닝에서의 DAG구조에 대해 알아보자.</p>

<h2 id="graph-종류">Graph 종류</h2>

<p>그래프에 대해 전부 다루게 되면 논점이 흐리게 될 것 같아, 무방향 그래프(Undirected Graph)와 방향 그래프(Directed Graph)만 간단하게 다룰 것이다.</p>

<h3 id="무방향-그래프-undirected-graph">무방향 그래프 (Undirected Graph)</h3>

<p>무방향 그래프는 말 그대로 방향이 없는 그래프를 말한다.<br />
간선을 통해 노드는 양방향으로 갈 수 있다.</p>

<p><img src="/public/img/DAG1.png" alt="DAG1" width="40%" class="center" /></p>

<h3 id="방향-그래프-directed-graph">방향 그래프 (Directed Graph)</h3>

<p>방향 그래프는 간선에 방향이 있는 그래프를 말한다.</p>

<p><img src="/public/img/DAG2.png" alt="DAG2" width="40%" class="center" /></p>

<h3 id="사이클cycle과-비순환-그래프-acyclic-graph">사이클(Cycle)과 비순환 그래프 (Acyclic Graph)</h3>

<p>사이클은 단순 경로의 시작 노드와 종료 노드가 동일할 경우를 말하고 비순환 그래프는 사이클이 없는 그래프를 말한다.</p>

<p><img src="/public/img/DAG3.png" alt="DAG3" width="70%" class="center" /></p>
<center>(좌)비순환 그래프 / (우)사이클 </center>

<h2 id="directed-acyclic-graph">Directed Acyclic Graph</h2>

<p>DAG는 비순환 그래프를 말하며, 순환하는 사이클이 존재하지 않고 일방향성만 가진다.</p>

<p><img src="/public/img/DAG4.png" alt="DAG4" width="60%" class="center" /></p>

<p>순환한다는 것은 출발한 노드에서 시작하여 끝내 다시 시작노드로 돌아가는 것이 순환 반복될 수 있는 그래프인데, 
위 그래프처럼 다시 되돌아갈 간선이 없는 그래프라면 비순환 그래프라고 한다.</p>

<h2 id="deep-learning-dag">Deep Learning DAG</h2>

<p>일반적으로 DAG는 작업들의 우선순위를 표현할 때, DAG구조를 사용한다.<br />
예를 들어 공장에서 작업 스케줄링을 할 때, A라는 작업이 끝나고 B를 해야하고 B가 끝난 다음에는 C,D를 해야한다는 것을 DAG로 표현할 수 있다.</p>

<p>딥러닝에서는 여러 개의 Task로 나뉘어서 순차적으로 실행할 필요가 있다. 만약 DAG가 아닌 사이클 구조를 가진다면 그 작업은 영원히 완수되기 어렵기 때문이다. 따라서 작업간의 순서를 그래프로 표현할때는 DAG로 표현하는 것이 일반적이다.</p>

<p><img src="/public/img/DAG5.png" alt="DAG5" class="center" /></p>

<p>요즘은 이런 작업 흐름을 관리하기 위해 workflow 도구가 나와있으며 그 중 하나인 Airflow는 Graph View 기능을 제공한다.</p>]]></content><author><name></name></author><category term="MachineLearning" /><summary type="html"><![CDATA[DAG는 Directed Acyclic Graph의 약자이다. 순환 그래프가 아닌 비순환 그래프를 말하며, 순환하는 싸이클은 존재하지 않고 일방향성만 가진다. 그래프 종류와 딥러닝에서의 DAG구조에 대해 알아보자.]]></summary></entry><entry><title type="html">파이썬 for-else 사용하기</title><link href="http://localhost:4000/python/2022/07/12/python-for-else.html" rel="alternate" type="text/html" title="파이썬 for-else 사용하기" /><published>2022-07-12T15:00:00+09:00</published><updated>2022-07-12T15:00:00+09:00</updated><id>http://localhost:4000/python/2022/07/12/python-for-else</id><content type="html" xml:base="http://localhost:4000/python/2022/07/12/python-for-else.html"><![CDATA[<p><code class="highlighter-rouge">if</code>문에 <code class="highlighter-rouge">else</code>문이 있는데, <code class="highlighter-rouge">else</code>는 <code class="highlighter-rouge">for</code>문에도 있다.<br />
친숙하지 않겠지만, 사용법을 이해하면 유용하게 사용할 수 있다.</p>

<h2 id="for-else">for-else</h2>
<p>보통 for문은 아래와 같이 사용한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="s">'equals'</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="s">'*'</span><span class="p">,</span> <span class="n">n</span><span class="o">//</span><span class="n">x</span><span class="p">)</span>
            <span class="k">break</span>           
</code></pre></div></div>

<p>위 코드는 공식 문서에서 가져온 간단한 예시고, 소수를 찾는 코드이다. <br />
여기서 <code class="highlighter-rouge">else</code>를 사용하면 아래와 같이 출력이 해볼 수 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="s">'equals'</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="s">'*'</span><span class="p">,</span> <span class="n">n</span><span class="o">//</span><span class="n">x</span><span class="p">)</span>
            <span class="k">break</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="s">'is a prime number'</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">else</code>는 루프가 정상적으로 완료되면 실행되며, 이것은 어떠한 break문도 만나지 않았다는 것을 말한다. 루프를 실행하고 각 아이템을 검색하는 것이 일반적인 구조인데, 루프를 종료시키는 시나리오에는 두가지가 있다. <br />
첫번째는 아이템을 발견하고 break를 만나 루프를 빠져나오거나, 두번째는 루프를 끝까지 도는 것이다. 이때 어떤 것이 루프를 종료시키는 원인인지 궁금할 때, 위 코드처럼 루프가 끝나면 플래스를 확인하는 방법으로 사용할 수있다.</p>]]></content><author><name></name></author><category term="Python" /><summary type="html"><![CDATA[if문에 else문이 있는데, else는 for문에도 있다. 친숙하지 않겠지만, 사용법을 이해하면 유용하게 사용할 수 있다.]]></summary></entry><entry><title type="html">에러 - Anconda 가상환경 구축 후, env name 사라지는 현상</title><link href="http://localhost:4000/etc/2022/07/03/conda-env-name-missing.html" rel="alternate" type="text/html" title="에러 - Anconda 가상환경 구축 후, env name 사라지는 현상" /><published>2022-07-03T15:00:00+09:00</published><updated>2022-07-03T15:00:00+09:00</updated><id>http://localhost:4000/etc/2022/07/03/conda-env-name-missing</id><content type="html" xml:base="http://localhost:4000/etc/2022/07/03/conda-env-name-missing.html"><![CDATA[<h2 id="문제점">문제점</h2>

<p>평소 keras만 쓰다가, 갑자기 pytorch를 써야되서 conda 환경 하나 팠다.<br />
그리고 몇칠 후, 다른 환경으로 가려고 평소 쓰던 환경으로 <code class="highlighter-rouge">conda activate [env name]</code>을 쳤는데, 안된다?</p>

<p>급히  <code class="highlighter-rouge">conda env list</code> 명령어로 확인하니, 이름이 사라진 것을 보게 되었다.</p>

<p><img src="/public/img/env-name-missing.png" alt="env_img" width="70%" height="70%" class="center" /></p>

<p>진짜 가상환경 이름만 사라져서 당황스럽다.<br />
확인해보니, <code class="highlighter-rouge">[env name]</code> 을 적는 부분에 직접 경로를 입력해주니까 해당 환경으로 들어가진다.</p>

<h2 id="해결-방안">해결 방안</h2>

<p>Stackoverflow에서는 conda update 하라고 했는데, <br />
나는 소용없었고, <code class="highlighter-rouge">conda config --add envs_dirs &lt;path to envs&gt;</code> 명령어로 해결하였다.</p>

<p><img src="/public/img/env-name-missing2.png" alt="env_img" width="70%" height="70%" class="center" /></p>

<p>좀더 찾아보니, 가끔 conda에서 업데이트나 여러 환경을 만들다가 발생할 수 있는 문제라고 한다.</p>]]></content><author><name></name></author><category term="ETC" /><summary type="html"><![CDATA[문제점]]></summary></entry><entry><title type="html">프로그래밍의 패러다임에 대해 알아보자.</title><link href="http://localhost:4000/python/2022/06/23/multi-paradigm-languages.html" rel="alternate" type="text/html" title="프로그래밍의 패러다임에 대해 알아보자." /><published>2022-06-23T15:00:00+09:00</published><updated>2022-06-23T15:00:00+09:00</updated><id>http://localhost:4000/python/2022/06/23/multi-paradigm-languages</id><content type="html" xml:base="http://localhost:4000/python/2022/06/23/multi-paradigm-languages.html"><![CDATA[<p>이전 포스팅에서 파이썬은 ‘멀티 패러다임’ 이라고 말했다.<br />
오늘은 그에 대해 조금 더 자세히 이야기 해볼까한다.</p>

<h2 id="프로그래밍-패러다임">프로그래밍 패러다임</h2>

<p>프로그래밍의 패러다임이란, 개발자가 코드를 짤 때, 어떤 관점을 가지고 짜느냐에 결정적인 역활을 한다.<br />
크게 선언형과 명령형으로 나눌 수 있고, 이 안에는 객체 지향과 절차 지향, 함수형 프로그래밍이 포함되어 있다.</p>

<ul>
  <li>명령형 프로그래밍 : 절차 지향 프로그래밍, 객체 지향 프로그래밍</li>
  <li>선언형 프로그래밍 :  함수형 프로그래밍</li>
</ul>

<h3 id="프로그래밍-패러다임의-특징">프로그래밍 패러다임의 특징</h3>

<ul>
  <li>명령형 프로그래밍 : 알고리즘을 명시하고 목표는 명시하지 않음.</li>
  <li>선언형 프로그래밍 : 알고리즘을 명시하지 않고 목표만 명시함.</li>
</ul>

<p>사람이 횡단보도를 건너는 프로그래밍을 짠다고 가정한다면 아래와 같이 볼 수 있다.</p>

<ul>
  <li>명령형 프로그래밍 : 횡단보도까지 약 5m이동하고, 초록불 일 때까지 기다렸다가 초록불이면 약 10m 앞으로 이동한다</li>
  <li>선언형 프로그래밍 : 초록불이 되면 길을 건넌다.</li>
</ul>

<p>이렇게 명령형은 사람이 걸어가는 과정(how)의 알고리즘을 명시하지만, 프로그램의 목적은 명시하지 않는다. 반대로 선언형은 초록불이 되면 길을 건넌다라는 목표만(what)을 명시한다.</p>

<h2 id="절차-지향과-객체-지향-프로그래밍">절차 지향과 객체 지향 프로그래밍</h2>

<p>절차 지향과 객체 지향 개념은 서로 반대 개념이 아니다.<br />
둘다 명령형 프로그램의 하위 개념이기에 공유하는 것이 많다.</p>

<ul>
  <li>절차지향 프로그래밍
    <ul>
      <li>프로그램의 순서와 흐름을 중점으로 필요한 자료구조와 함수를 설계<br />
  (데이터 중심으로 절차적으로 실행에 초점)</li>
    </ul>
  </li>
  <li>객체지향 프로그래밍
    <ul>
      <li>자료구조와 함수를 먼저 설계하고 그 후에 실행 순서와 흐름을 설계 
  (객체간의 관계에 초점)</li>
    </ul>
  </li>
</ul>

<h2 id="관점-지향-프로그래밍aspect-oriented-programming">관점 지향 프로그래밍(Aspect Oriented Programming)</h2>

<p><img src="/public/img/AOP2.png" alt="AOP2" width="70%" height="70%" class="center" /></p>

<p>관점지향 프로그래밍의 핵심은 공통 모듈을 분리시켜 해당 소스코드가 외부의 다른 클래스에서 존재하는 것이다. 참고로 객체지향을 보조하는 역활이기 때문에 객체지향 코드위에서 이루어진다.</p>

<p>객체지향은 객채(Object)라는 개념을 활용함으로써 큰 프로그램을 모듈 단위로 축소시켜 작성할 수 있게 했지만, 프로그램의 크기가 엄청나게 커지면서 모듈 안에서마저 중복되는 코드가 생기게 된다.</p>

<p>이렇게 모듈 안에서 중복코드가 생기게 되는 것을 횡단 관심사(Crosscutting-Concerns) 라고 한다. 그 중에 자주 언급되는 것은 트랜잭션, 로깅, 성능 분석 등이 있다.</p>

<p><img src="/public/img/AOP.png" alt="AOP" width="70%" height="70%" class="center" /></p>

<p>횡단 관심사들은 여러 모듈들을 말 그대로 횡단하면서 존재하게 되며 AOP를 이해함에 있어서 매우 중요한 개념이며, AOP를 통해 중복 코드 제거, 효율적인 유지복수, 높은 생산성, 재활용성 극대화 등의 이점을 얻을 수 있다.</p>

<h2 id="함수형-프로그래밍">함수형 프로그래밍</h2>

<p>쉽게 말하면 함수형 프로그래밍은 변수 사용을 최소화함으로써 오류를 줄이는 프로그래밍이다.<br />
정의는 자료 처리를 수학적 함수의 계산으로 취급하고, 상태와 가변 데이터를 멀리하는 프로그래밍 패러다임 중 하나이다.</p>

<p>왜 변수 사용을 최소화 해야하는 걸까 ?</p>

<p>변수는 프로그램에서 개발자가 메인 메모리 공간에 올려놓은 값인데, 값이 대입되면 바뀔 수 없는 상수와 달리 변수는 언제든 값을 변경할 수 있다. 적절히 사용하면 좋겠지만, 여러 스레드가 돌아가면 변수는 오류의 원인으로 작용할 가능성이 크다.</p>

<p>함수형 프로그래밍은 외부에 따로 상태 값을 두지 않고 내부에서 연쇄적으로 기능을 사용해서 결과를 연산하기 때문에 외부 요소의 영향을 받지 않고 안전한 코드를 작성 할 수 있다.</p>

<h3 id="함수형-프로그래밍의-특징">함수형 프로그래밍의 특징</h3>

<p>함수형 프로그래밍에는 5가지의 특성이 있다.</p>

<ol>
  <li>순수 함수 (Pure function) <br />
 함수형 프로그래밍에서는 일반적인 함수의 조합이 아니라 순수함수의 조합이다.
    <ul>
      <li>동일한 입력에는 항상 같은 값을 반환해야 한다.</li>
      <li>함수의 출력(return)은 그 함수의 입력(input)에만 의존한다.</li>
      <li>함수의 실행은 프로그램의 실행에 영향을 미치지 않아야 한다. (return만 수행한다는 의미)</li>
    </ul>
  </li>
  <li>고차 함수 (Higher-Order Functions)
    <ul>
      <li>함수를 인자(argument)로 받는다.</li>
      <li>함수의 리턴값으로 함수를 사용할 수 있다.</li>
    </ul>
  </li>
  <li>
    <p>불변성(Immutability)<br />
 변하지 않는 성질을 말한다.<br />
 불변성을 지키기 위해서는 데이터 변경이 필요할 경우 원본을 유지한 채 복사본을 만들어 작업해야한다.</p>
  </li>
  <li>1급 객체(First-Class Object) 
 1급 객체란 함수를 값으로 다루는 것을 이야기한다.<br />
 특징으로는 다음과 같은 것들이 가능한 객체를 의미한다.
    <ul>
      <li>변수나 데이터 구조 안에 담을 수 있다.</li>
      <li>파라미터로 전달 할 수 있다.</li>
      <li>반환값으로 사용할 수 있다.</li>
      <li>할당에 사용된 이름과 무관하게 고유한 구별이 가능하다.</li>
    </ul>

    <p>참고로 순수 함수들과는 다르다는 것을 인지해야한다.</p>
  </li>
  <li>익명 함수(Anonymous function)<br />
 이름 없는 함수를 말하며 람다식으로 표현되는 함수 구현을 말한다.</li>
</ol>

<h3 id="파이썬은-멀티패러다임-언어">파이썬은 멀티패러다임 언어</h3>

<p>파이썬은 절차지향, 객체지향, 함수형 프로그래밍을 지원하는 멀티패러다임 언어이다. 예시를 통해 알아보자.</p>

<h3 id="절차-지향---jupyter-notebook">절차 지향 - Jupyter Notebook</h3>

<p>절차 지향은 위에서도 언급했듯 데이터를 중심으로 순차적으로 코드를 구현하는 프로그래밍 방식이다.<br />
Jupyter Notebook을 이용하여 데이터 분석을 하는데, 이것은 절차지향적 방식이라고도 볼 수 있다. 주피터의 경우 셀 단위로 전처리, 모델링, 시각화 코드를 순차적으로 작성하고 실행시켜 결과를 확인하기 때문이다.</p>

<h3 id="객체-지향---ml-model-django">객체 지향 - ML Model, Django</h3>

<p>객체 지향은 추상화된 클래스와 이에 대한 속성과 행위를 정의하고 이를 중심으로 개발하는 프로그래밍 방식이다.</p>

<p>머신러닝 모델은 대부분 클래스로 정의 되어 있고, fit(), predict()로 훈련과 예측을 할 수 있도록 모델이 구현되어 있다. 머신러닝 개발자들은 모델 객체를 선언하고 활용하는 법만 알면 따로 모델을 구현할 필요 없이 머신러닝 모델을 활용할 수 있다.</p>

<p>또한 Django 역시 파이썬 객체지향 프로그래밍의 대표적인 예시이다.<br />
야놀자 같은 사이트를 만든다고 가정할 때, 사용자, 방, 예약, 리뷰 등의 개념을 객체로 구성하고 이를 관리하기 위한 데이터 모델이나 화면에 표시하기 위한 뷰를 만들어 웹 사이트를 만들게 된다.</p>

<h3 id="함수형---pyspark">함수형 - PySpark</h3>

<p>데이터 분석에서 함수형 프로그래밍의 특징은 thread-safe하고 병렬계산을 가능하게 하기 때문에 대용량 데이터를 다룰 때 활용된다.</p>

<p>예시 코드는 아래와 같다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lines</span> <span class="o">=</span> <span class="n">sc</span><span class="p">.</span><span class="n">textFile</span><span class="p">(</span><span class="s">"data.txt"</span><span class="p">)</span>
<span class="n">lineLengths</span> <span class="o">=</span> <span class="n">lines</span><span class="p">.</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">s</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>
<span class="n">totalLength</span> <span class="o">=</span> <span class="n">lineLengths</span><span class="p">.</span><span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span>
</code></pre></div></div>

<p>코드를 보면 별도의 변수의 선언 없이 함수들의 조합만으로 원하는 결과를 얻을 수 있다. 또한 리스트 컴프리헨션을 이용해 새로운 리스트를 선언 없이 리스트 값을 필터링 한다는 등이 있다.</p>

<h3 id="관점지향---decorator">관점지향 - Decorator</h3>

<p>관점지향 프로그래밍의 경우 decorator를 잘 사용하는 것이라 보면 된다.</p>

<hr />
<p><strong>reference</strong>  <br />
<a href="https://velog.io/@gillog/AOP%EA%B4%80%EC%A0%90-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D">https://velog.io/@gillog</a>
<a href="https://hoi5088.medium.com/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84-%EC%A0%88%EC%B0%A8-%EC%A7%80%ED%96%A5-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-a5160a1e39e4">https://hoi5088.medium.com/</a><br />
<a href="https://docs.python.org/3/howto/functional.html">https://docs.python.org/3/howto/functional.html</a><br />
<a href="https://jinwoo1990.github.io/dev-wiki/python-concept-1/">https://jinwoo1990.github.io/dev-wiki/python-concept-1/</a></p>]]></content><author><name></name></author><category term="Python" /><summary type="html"><![CDATA[이전 포스팅에서 파이썬은 ‘멀티 패러다임’ 이라고 말했다. 오늘은 그에 대해 조금 더 자세히 이야기 해볼까한다.]]></summary></entry></feed>