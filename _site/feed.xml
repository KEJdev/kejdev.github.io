<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-26T17:42:39+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Eunji Kim</title><subtitle>양념치킨🍗 좋아하는 개발자</subtitle><entry><title type="html">파이썬 map() 함수의 활용 방법과 예제 코드</title><link href="http://localhost:4000/python/2023/03/25/python-map.html" rel="alternate" type="text/html" title="파이썬 map() 함수의 활용 방법과 예제 코드" /><published>2023-03-25T15:00:00+09:00</published><updated>2023-03-25T15:00:00+09:00</updated><id>http://localhost:4000/python/2023/03/25/python-map</id><content type="html" xml:base="http://localhost:4000/python/2023/03/25/python-map.html"><![CDATA[<p>파이썬의 <code class="highlighter-rouge">map</code>함수는 파이썬 내장 함수 중 하나로 리스트, 튜플 등 반복 가능한(iterable)를 입력받아, 해당 객체의 모든 요소에 대해 특정 함수를 적용한 결과를 새로운 리스트로 반환하는 함수이다. <br />
<br />
가장 기본적인 형태로 자주 쓰이는 <code class="highlighter-rouge">map</code>는 아래와 같다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">numbers</span><span class="p">)))</span> <span class="c1"># ['1', '2', '3', '4', '5']
</span>
<span class="n">string_it</span> <span class="o">=</span> <span class="p">[</span><span class="s">"processing"</span><span class="p">,</span> <span class="s">"strings"</span><span class="p">,</span> <span class="s">"with"</span><span class="p">,</span> <span class="s">"map"</span><span class="p">]</span>
<span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">.</span><span class="n">upper</span><span class="p">,</span> <span class="n">string_it</span><span class="p">))</span>
</code></pre></div></div>

<p>파이썬의 <code class="highlighter-rouge">map</code>함수는 여러 인자를 받을 수 있는데, 첫번째 인자는 자료형, 함수를 받을 수 있고, 
두번째 인자부터는 반복가능한 iterable를 받는다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">map</span><span class="p">(</span><span class="n">function</span><span class="p">,</span> <span class="n">iterable</span><span class="p">[,</span> <span class="n">iterable1</span><span class="p">,</span> <span class="n">iterable2</span><span class="p">,...,</span> <span class="n">iterableN</span><span class="p">])</span>
</code></pre></div></div>

<p><br />
<code class="highlighter-rouge">map</code> 함수를 조금 더 이해하기 위해 리스트에 있는 모든 숫자를 제곱하여 리스트로 반환하는 코드를 작성했다. 
<code class="highlighter-rouge">map</code>함수를 쓰지 않고 for문만을 사용한다고 하면 아래와 같이 작성할 수 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="n">squared</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
    <span class="n">squared</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">num</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span> 
<span class="k">print</span><span class="p">(</span><span class="n">squared</span><span class="p">)</span> <span class="c1"># [1, 4, 9, 16, 25]
</span></code></pre></div></div>

<p>위 코드를 <code class="highlighter-rouge">map</code>함수를 이용하여 코드를 작성한다고 하면, 아래와 같이 작성할 수 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">square</span><span class="p">(</span><span class="n">numbers</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">numbers</span> <span class="o">**</span> <span class="mi">2</span>

<span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="n">squared</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="n">square</span><span class="p">,</span> <span class="n">numbers</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">squared</span><span class="p">))</span> <span class="c1"># [1, 4, 9, 16, 25]
</span></code></pre></div></div>

<p><code class="highlighter-rouge">square</code> 함수는 숫자를 인자로 받아서 제곱값을 반환하는 함수이다.<br />
<code class="highlighter-rouge">map(square, numbers)</code> 코드는 <code class="highlighter-rouge">square</code>함수를  <code class="highlighter-rouge">numbers</code> 리스트 각 요소에 적용하여 새로운 값을 반환하는 제너레이터 객체를 생성한다.
마지막으로 <code class="highlighter-rouge">list(squared)</code>는 <code class="highlighter-rouge">squared</code>를 리스트로 변환하고 출력한다. 
<br /></p>

<h3 id="여러개의-리스트를-map-함수에-적용하기">여러개의 리스트를 map 함수에 적용하기</h3>

<p>여러개의 리스트를 인자로 넣고 싶다면 아래와 같이 <code class="highlighter-rouge">lambda</code> 함수를 사용할 수 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numbers1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="n">numbers2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>

<span class="n">squared</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">**</span> <span class="n">y</span><span class="p">,</span> <span class="n">numbers1</span><span class="p">,</span> <span class="n">numbers2</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">squared</span><span class="p">))</span> <span class="c1"># [1, 128, 6561, 262144, 9765625]
</span></code></pre></div></div>

<p>또는 함수를 사용하여 이렇게도 가능하다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">first_it</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="n">second_it</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>

<span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">pow</span><span class="p">,</span> <span class="n">first_it</span><span class="p">,</span> <span class="n">second_it</span><span class="p">))</span> <span class="c1"># [1, 32, 729]
</span></code></pre></div></div>
<p><br /></p>

<h3 id="filter함수와-map-함수-함께-사용하기">filter함수와 map 함수 함께 사용하기</h3>

<p>map함수는 filter함수와 짝궁으로 많이 사용하는데 아래와 같이 사용할 수 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">is_positive</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">num</span> <span class="o">&gt;=</span> <span class="mi">1</span>

<span class="n">num_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>
<span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">filter</span><span class="p">(</span><span class="n">is_positive</span><span class="p">,</span> <span class="n">num_list</span><span class="p">)))</span> <span class="c1"># ['1', '2', '3']
</span></code></pre></div></div>

<p><br /></p>

<h3 id="-what-map-object-">🤔 what map object ?</h3>

<p><code class="highlighter-rouge">map</code>함수를 쓰다보면 아래와 같은 값을 많이 볼 수 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">square</span><span class="p">(</span><span class="n">numbers</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">numbers</span> <span class="o">**</span> <span class="mi">2</span>

<span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">square</span><span class="p">,</span> <span class="n">numbers</span><span class="p">))</span> <span class="c1"># &lt;map at 0x107c6d670&gt;
</span></code></pre></div></div>

<p><code class="highlighter-rouge">map</code>함수 사용 후 단순히 print를 찍어보면 객체로 떨어지는데 이건 왜 그런걸까? <code class="highlighter-rouge">map</code>이 객체를 반환하는 이유는 2가지가 있다.
첫번째는 지연평가(lazy evaluation)과 제너레이터(generator)를 사용하여 메모리를 효율적으로 사용하기 때문이다.</p>

<p><br />
즉, <code class="highlighter-rouge">map</code>함수가 호출되면 <code class="highlighter-rouge">map</code> 객체가 생성되지만 실제로 함수가 실행되는 것은 <code class="highlighter-rouge">map</code> 객체를 이용하는 다른 함수가 호출될때까지 미뤄진다.
예를 들면 다음과 같이 <code class="highlighter-rouge">map</code>을 호출하여 사용하는 경우를 보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">squares</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>
</code></pre></div></div>

<p>이때 <code class="highlighter-rouge">squares</code>라는 <code class="highlighter-rouge">map</code>객체를 생성하지만, 실제로 <code class="highlighter-rouge">lambda</code> 함수가 싱실행되는 것은 <code class="highlighter-rouge">squares</code>객체를 이용하는 다른 함수가 호출될때까진 미뤄진다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">squares</span><span class="p">))</span>
</code></pre></div></div>

<p>따라서 위 코드 <code class="highlighter-rouge">squares</code>객체를 리스트로 변환하는 순간 <code class="highlighter-rouge">lambda</code>함수가 실행되어 각 요소의 제곱이 계산된다. 
이렇게 하면, 메모리를 절약할 수 있고, 성능을 향상시킬 수 있다.
또한, <code class="highlighter-rouge">map</code> 객체는 <code class="highlighter-rouge">iterable</code>이므로, 필요할 때 순회하며 값을 계산할 수 있다. 또한 <code class="highlighter-rouge">filter</code>함수도 <code class="highlighter-rouge">map</code> 함수와 마찬가지로 지연평가를 지원한다.</p>]]></content><author><name></name></author><category term="Python" /><summary type="html"><![CDATA[파이썬의 map함수는 파이썬 내장 함수 중 하나로 리스트, 튜플 등 반복 가능한(iterable)를 입력받아, 해당 객체의 모든 요소에 대해 특정 함수를 적용한 결과를 새로운 리스트로 반환하는 함수이다. 가장 기본적인 형태로 자주 쓰이는 map는 아래와 같다.]]></summary></entry><entry><title type="html">파이썬으로 구현하는 선택 정렬(Selection Sort)</title><link href="http://localhost:4000/algorithm/2023/03/12/SelectionSortAlgorithm.html" rel="alternate" type="text/html" title="파이썬으로 구현하는 선택 정렬(Selection Sort)" /><published>2023-03-12T15:00:00+09:00</published><updated>2023-03-12T15:00:00+09:00</updated><id>http://localhost:4000/algorithm/2023/03/12/SelectionSortAlgorithm</id><content type="html" xml:base="http://localhost:4000/algorithm/2023/03/12/SelectionSortAlgorithm.html"><![CDATA[<h2 id="-selection-sort선택-정렬">🥕 Selection Sort(선택 정렬)</h2>

<p>선택 정렬은 배열에서 가장 작은 값을 선택하고 그 값을 배열의 맨 앞으로 이동시키는 과정을 반복하여 정렬을 수행하는 방법이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">num_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>

<span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">num_list</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
    <span class="n">min_idx</span> <span class="o">=</span> <span class="n">idx</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">num_list</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">num_list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">num_list</span><span class="p">[</span><span class="n">min_idx</span><span class="p">]:</span>
            <span class="n">min_idx</span> <span class="o">=</span> <span class="n">j</span>
    <span class="k">if</span> <span class="n">idx</span> <span class="o">!=</span> <span class="n">min_idx</span><span class="p">:</span>
        <span class="n">num_list</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">num_list</span><span class="p">[</span><span class="n">min_idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">num_list</span><span class="p">[</span><span class="n">min_idx</span><span class="p">],</span> <span class="n">num_list</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>

<span class="k">print</span><span class="p">(</span><span class="n">num_list</span><span class="p">)</span>
</code></pre></div></div>

<p>선택 정렬은 가장 작은 값을 선택해 배열의 앞쪽부터 정렬해가는 방식을 수행한다. 파이썬으로 구현한다면 위와 같이 구현할 수 있으며, 배열의 첫번째 요소부터 시작해 가장 작은 값을 찾아서 배열의 맨 앞으로 보낸식의 코드이다. for문을 이용하여 배열의 인덱스를 하나씩 순회하며 현재 인덱스부터 배열의 끝까지 중 가장 작은 값을 찾아서 현재 위치로 이동시키는 과정을 반복한다.  <br />
<br />
버블정렬과 선택 정렬과의 차이는 버블 정렬은 첫번째 요소와 두번째 요소를 비교하여 큰값을 뒤로 보내는 형식으로 구현되어 있는 반면에 선택 정렬은 배열에서 가장 작은 최솟값을 찾아 첫번째 요소와 교환하는 식으로 구현되어 있다.</p>

<h4 id="장점">장점</h4>
<ul>
  <li>구현이 간단하고 이해하기 쉽다</li>
  <li>제자리 정렬로 추가 메모리가 필요하지 않음</li>
  <li>데이터 이동 횟수가 미리 결정되어 있어 안정성이 높음</li>
</ul>

<h4 id="단점">단점</h4>
<ul>
  <li>평균적인 시간복잡도가 $O(n^2)$이므로 데이터가 많을수록 느려짐</li>
  <li>입력 데이터의 초기 순서에 따라 성능이 크게 좌우됨</li>
  <li>비교적 큰 데이터 셋에 대해 효율적이지 않음</li>
</ul>]]></content><author><name></name></author><category term="Algorithm" /><summary type="html"><![CDATA[🥕 Selection Sort(선택 정렬)]]></summary></entry><entry><title type="html">파이썬으로 구현하는 삽입 정렬(Insertion Sort)</title><link href="http://localhost:4000/algorithm/2023/03/12/InsertionSortAlgorithm.html" rel="alternate" type="text/html" title="파이썬으로 구현하는 삽입 정렬(Insertion Sort)" /><published>2023-03-12T15:00:00+09:00</published><updated>2023-03-12T15:00:00+09:00</updated><id>http://localhost:4000/algorithm/2023/03/12/InsertionSortAlgorithm</id><content type="html" xml:base="http://localhost:4000/algorithm/2023/03/12/InsertionSortAlgorithm.html"><![CDATA[<h2 id="insertion-sort삽입-정렬">🤚🏻 Insertion Sort(삽입 정렬)</h2>

<p>삽입 정렬은 데이터 셋을 순회하면서 정렬이 필요한 요소를 뽑아내어 이를 다시 적당한 곳으로 삽입하는 방식이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">num_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>

<span class="k">for</span> <span class="n">list_idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">num_list</span><span class="p">)):</span>
    <span class="n">element</span> <span class="o">=</span> <span class="n">num_list</span><span class="p">[</span><span class="n">list_idx</span><span class="p">]</span>
    <span class="n">idx</span> <span class="o">=</span> <span class="n">list_idx</span> <span class="o">-</span> <span class="mi">1</span>
    
    <span class="k">while</span> <span class="n">idx</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">num_list</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">element</span><span class="p">:</span>
        <span class="n">num_list</span><span class="p">[</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">num_list</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> 
        <span class="n">idx</span> <span class="o">-=</span> <span class="mi">1</span>
    <span class="n">num_list</span><span class="p">[</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">element</span> 
</code></pre></div></div>

<p>리스트의 두번째 요소부터 시작해서 그 이전의 요소들을 비교하는 파이썬 코드이며, 이전에 있던 정렬 알고리즘들과 다르게 삽입정렬 while문이 들어간다. (물론 while문 없어도 구현은 가능)</p>

<p>하지만 while문을 사용하는 이유는 현재 위치에서 그 이전의 요소들을 전부 하나씩 비교하여 자신이 들어갈 위치를 찾아 삽입하기 때문에 대부분의 삽입 정렬에는 while문을 사용한다.</p>

<h4 id="장점">장점</h4>
<ul>
  <li>구현이 간단하고 이해하기 쉬움</li>
  <li>작은 데이터 세트에 대해 효율적인 알고리즘이며 데이터 세트가 이미 정렬되어 있을 경우에는 더욱 빠름</li>
  <li>Stable Sort이기 때문에 데이터가 동일한 값을 가지는 경우에도 순서가 바뀌지 않음</li>
</ul>

<h4 id="단점">단점</h4>
<ul>
  <li>데이터 세트의 길이가 길어질수록 비효율적임</li>
  <li>최악의 경우 데이터의 정렬이 역순으로 되어 있는 경우 모든 요소를 비교해야 하므로 $O(n^2)$의 시간복잡도를 가짐</li>
  <li>제자리 정렬 아니기 때문에 추가적인 메모리 공간이 필요함s</li>
</ul>]]></content><author><name></name></author><category term="Algorithm" /><summary type="html"><![CDATA[🤚🏻 Insertion Sort(삽입 정렬)]]></summary></entry><entry><title type="html">파이썬으로 구현하는 버블 정렬(Bubble Sort)</title><link href="http://localhost:4000/algorithm/2023/03/12/BubbleSortAlgorithm.html" rel="alternate" type="text/html" title="파이썬으로 구현하는 버블 정렬(Bubble Sort)" /><published>2023-03-12T15:00:00+09:00</published><updated>2023-03-12T15:00:00+09:00</updated><id>http://localhost:4000/algorithm/2023/03/12/BubbleSortAlgorithm</id><content type="html" xml:base="http://localhost:4000/algorithm/2023/03/12/BubbleSortAlgorithm.html"><![CDATA[<p>정렬 알고리즘은 N개의 숫자가 주어졌을 때, 사용자가 지정한 기준에 맞게 정렬하는 알고리즘을 말한다.</p>

<h2 id="잠깐-집고-넘어가기">🤚🏻 잠깐, 집고 넘어가기</h2>

<p>정렬 알고리즘에 대해 설명하기 전에 아래 개념을 알아두자. <br />
Stable는 같은 값을 가지는 요소들이 정렬된 순서가 유지되는 것을 말하며, In Place는 입력 배열 외 추가적인 배열을 사용하지 않는 것을 말한다. Not Stable은 반대로 같은 값을 가지는 요소들의 정렬 순서가 유지되지 않는 것을 말하고, Not In Place는 추가적인 배열을 사용하는 것을 말한다. 정리하면 아래와 같다.</p>

<ul>
  <li>stable : 중복된 키 값이 있을 때, 해당 값들이 처음 나타난 순서대로 정렬됨</li>
  <li>not stable : 중복된 키 값이 있을 때, 해당 값들의 상대적인 순서가 보장되지 않음</li>
  <li>in place : 추가적인 저장 공간을 상수 시간 내에 고정된 양만 사용함</li>
  <li>not in place : 추가적인 저장 공간을 원소들의 갯수에 비례하여 사용함</li>
</ul>

<p>Stable이 중요한 이유는 예를 들어 학생들의 성적을 정렬할때, 이름순으로 먼저 정렬하고 같은 이름의 경우 성적 순서로 정렬하면 안정성 있는 정렬 알고리즘이 된다. 따라 Stable 하냐 Not Stable 하냐는 매우 중요한 속성으로 사용할 수 있다.</p>

<p>place 또한 원래 배열을 보존 해야 하는가, 아니면 추가적인 메모리 사용 없이 정렬을 처리 해야 하는가에 따라 사용할 수 있다.</p>

<p><code class="highlighter-rouge">1. Stable, In Place</code></p>
<ul>
  <li>삽입 정렬, 버블 정렬, 머지 정렬<br />
<code class="highlighter-rouge">머지 정렬은 일반적으로는 Stabel, 추가적인 배열 사용으로 Not in Place가 될 수 있음</code></li>
</ul>

<p><code class="highlighter-rouge">2. Not Stable, In Place</code></p>
<ul>
  <li>선택 정렬 , 퀵 정렬, 힙 정렬 <br />
<code class="highlighter-rouge">퀵 정렬은 Pivot 선택 방법에 따라 Stable할수도 있고, 추가적인 배열 사용으로 Not in Place가 될 수 있음</code></li>
</ul>

<p><code class="highlighter-rouge">3. Stable, Not In Place</code></p>
<ul>
  <li>계수 정렬, 기수 정렬</li>
</ul>

<p><code class="highlighter-rouge">4. Not Stable, Not In Place</code></p>
<ul>
  <li>쉘 정렬</li>
</ul>

<p>또한 정렬 알고리즘은 실행 방법과 정렬 장소에 따라 아래와 같이 분류할 수 있다.</p>

<h4 id="1-실행-방법에-따른-분류">1. 실행 방법에 따른 분류</h4>

<p>정렬 알고리즘 실행 방법에 따라 비교식 정렬(Comparative Sort), 분산식 정렬(Distribute Sort)로 분류할 수 있다.</p>

<ul>
  <li>Comparative Sort(비교식 정렬) : 비교식 정렬은 비교하고자하는 각 키값들을 한번에 두개씩 비교하는 교환 방식을 말한다. 대부분의 정렬 알고리즘이 비교식 정렬에 해당된다.
    <ul>
      <li>버블 정렬, 선택 정렬, 삽입 정렬, 퀵 정렬, 병합 정렬, 힙 정렬 등</li>
    </ul>
  </li>
  <li>Distribute Sort(분산식 정렬) : 분산식 정렬은 키값을 기준으로 하여 자료를 여러 개의 부분 집합으로 분해하고, 분해한 집합들간의 비교, 교환, 이동 등의 작업을 통해 정렬하는 방식이다. 대부분의 비교식 정렬보다는 더 빠른 속도를 보인다는 장점이 있다.
    <ul>
      <li>기수 정렬, 버킷 정렬, 카운팅 정렬 등</li>
    </ul>
  </li>
</ul>

<h4 id="2-정렬-장소에-따른-분류">2. 정렬 장소에 따른 분류</h4>

<p>정렬 알고리즘 장소에 따라 내부 정렬(Internal Sort), 외부 정렬(External Sort)로 분류할 수 있다.</p>

<ul>
  <li>Internal Sort(내부 정렬) : 내부 정렬은 정렬할 자료를 메인 메모리에 올려서 정렬하는 방식으로, 속도가 빠르지만 자료의 양이 메모리의 용량에 따라 제한된다는 단점이 있다.
    <ul>
      <li>버블 정렬, 선택정렬, 삽입 정렬, 퀵 정렬, 병합 정렬, 힙 정렬 등</li>
    </ul>
  </li>
  <li>External Sort(외부 정렬) : 외부 정렬은 정렬할 자료를 보조 기억 장치에서 정렬하는 방식이다. 내부 정렬보다는 속도는 떨어지지만 대용량의 자료에 대한 정렬이 가능하다는 장점이 있다.
    <ul>
      <li>병합 정렬 등</li>
    </ul>
  </li>
</ul>

<h2 id="-bubble-sort버블-정렬">🥕 Bubble Sort(버블 정렬)</h2>

<p>정렬 알고리즘의 종류는 여러가지가 있지만 이번 포스팅 시리즈로 버블 정렬, 선택 정렬, 삽입 정렬, 쉘 정렬, 퀵 정렬, 힙 정렬, 머지 정렬, 리덕스 정렬에 대한 이해와 파이썬 구현을 하려고 한다. <br />
<br /></p>

<p>버블 정렬은 인접한 두 요소의 크기를 비교하여 서로 교환하는 정렬 알고리즘이다. 버블 정렬은 두 개의 for루프를 사용하여 구현할 수 있으며 첫 번째 for 루프는 정렬할 리스트 길이 만큼 반복하고, 두 번째 for 루프는 인접한 두 요소를 비교하여 정렬을 수행한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">num_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>

<span class="k">for</span> <span class="n">lens</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">num_list</span><span class="p">)):</span>
    <span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">num_list</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">num_list</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">num_list</span><span class="p">[</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
            <span class="n">num_list</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">num_list</span><span class="p">[</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">num_list</span><span class="p">[</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="n">num_list</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
</code></pre></div></div>

<p>파이썬으로 구현하면 이렇게 구현할 수 있다. 이 형태는 버블 정렬의 기본적인 형태이고 많은 곳에서도 볼 수 있는 코드이지만, 이렇게 코드를 작성하게 된다면 정렬이 완료된 이후에는 더 이상 비교하지 않아도 되는데도 불구하고 계속 비교를 수행하게 된다. 그래서 아래와 같이 코드를 수정하면 조금 더 효율성을 높일 수 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">num_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">num_list</span><span class="p">)):</span>
    <span class="n">is_sorted</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">num_list</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">i</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">num_list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">num_list</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
            <span class="n">num_list</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">num_list</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">num_list</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="n">num_list</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
            <span class="n">is_sorted</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="k">if</span> <span class="n">is_sorted</span><span class="p">:</span>
        <span class="k">break</span>
</code></pre></div></div>

<p>이렇게 수정하게 된다면, 이전과 같이 정렬이 완료되었는지 여부를 확인하기 때문에 불필요한 순회를 종류할 수 있다.</p>

<h4 id="장점">장점</h4>
<ul>
  <li>구현하기 쉽고 이해하기 쉬움</li>
  <li>정렬할 데이터가 거의 정렬된 경우에는 다른 정렬 알고리즘보다 빠름</li>
  <li>추가적인 메모리 공간이 필요하지 않음</li>
</ul>

<h4 id="단점">단점</h4>
<ul>
  <li>시간 복잡도가 $O(n^2)$으로 상당히 느리며, 데이터가 많아질수록 더욱 느려짐</li>
  <li>최악의 경우에는 모든 원소를 비교해야 하므로, 정렬할 데이터의 크기에 비례하여 연산 횟수가 매우 많아짐</li>
  <li>Stabel Sort가 아니므로 같은 값에 대해 상대적인 순서가 보장되지 않음</li>
  <li>다른 정렬 알고리즘에 비해 정렬 속도가 느리고 효율적이지 않음</li>
</ul>]]></content><author><name></name></author><category term="Algorithm" /><summary type="html"><![CDATA[정렬 알고리즘은 N개의 숫자가 주어졌을 때, 사용자가 지정한 기준에 맞게 정렬하는 알고리즘을 말한다.]]></summary></entry><entry><title type="html">파이썬으로 구현하는 쉘 정렬(Shell Sort)</title><link href="http://localhost:4000/algorithm/2023/03/12/ShellSortAlgorithm.html" rel="alternate" type="text/html" title="파이썬으로 구현하는 쉘 정렬(Shell Sort)" /><published>2023-03-12T15:00:00+09:00</published><updated>2023-03-12T15:00:00+09:00</updated><id>http://localhost:4000/algorithm/2023/03/12/ShellSortAlgorithm</id><content type="html" xml:base="http://localhost:4000/algorithm/2023/03/12/ShellSortAlgorithm.html"><![CDATA[<h2 id="-shell-sort-쉘-정렬">🥕 Shell Sort (쉘 정렬)</h2>

<p>쉘 정렬은 삽입 정렬을 보완하여 만들어진 정렬 알고리즘이다. 배열을 일정한 간격(Gap)으로 분할한 후, 각 부분 리스트를 삽입 정렬을 이용하여 정렬하고 다시 간격을 줄여가면서 정렬를 반복한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">shell_sort</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
    <span class="n">gap</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="n">gap</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">//</span> <span class="mi">3</span><span class="p">:</span>
        <span class="n">gap</span> <span class="o">=</span> <span class="n">gap</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">1</span>  <span class="c1"># Sedgewick gap sequence
</span>
    <span class="k">while</span> <span class="n">gap</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">gap</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">j</span> <span class="o">=</span> <span class="n">i</span>
            <span class="k">while</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="n">gap</span> <span class="ow">and</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="n">gap</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">temp</span><span class="p">:</span>
                <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="n">gap</span><span class="p">]</span>
                <span class="n">j</span> <span class="o">-=</span> <span class="n">gap</span>
            <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span>
        <span class="n">gap</span> <span class="o">//=</span> <span class="mi">3</span>
    <span class="k">return</span> <span class="n">arr</span> 
</code></pre></div></div>

<p>간격이 1이 될때까지 while 루프를 반복하면서 일정한 가격만큼 떨어져 있는 요소끼리 비교하여 삽입 정렬을 수행한다. gap을 나누는 작업으로 간격을 점점 줄여나가며, 최종적으로 전체 배열이 정렬된다.</p>

<h4 id="장점">장점</h4>
<ul>
  <li>삽입정렬보다 속도가 빠르다.</li>
  <li>안정 정렬(Stable Sort)이기 때문에 동일한 값에 대해 원래의 상대적인 순서로 유지</li>
  <li>간격을 다양하게 선택하여 다양한 성능을 얻을 수 있음</li>
</ul>

<h4 id="단점">단점</h4>
<ul>
  <li>간격 선택에 따라 성능이 크게 달라지기 때문에 적절한 간격을 선택하지 않는다면 성능이 급격하게 저하될 수 있음</li>
  <li>안정성을 보장하기 위해 불필요한 비교 연산이 필요할 수 있음</li>
  <li>구현하기 상대적으로 복잡함</li>
</ul>]]></content><author><name></name></author><category term="Algorithm" /><summary type="html"><![CDATA[🥕 Shell Sort (쉘 정렬)]]></summary></entry><entry><title type="html">논문 리뷰 - R-CNN(2013) Rich feature hierarchies for accurate object detection and semantic segmentation Tech report (v5)</title><link href="http://localhost:4000/paper/2023/01/09/RCNN.html" rel="alternate" type="text/html" title="논문 리뷰 - R-CNN(2013) Rich feature hierarchies for accurate object detection and semantic segmentation Tech report (v5)" /><published>2023-01-09T15:00:00+09:00</published><updated>2023-01-09T15:00:00+09:00</updated><id>http://localhost:4000/paper/2023/01/09/RCNN</id><content type="html" xml:base="http://localhost:4000/paper/2023/01/09/RCNN.html"><![CDATA[<p>Paper URL : <a href="https://arxiv.org/pdf/1311.2524.pdf">https://arxiv.org/pdf/1311.2524.pdf</a></p>

<p>원본 논문은 위 링크를 참고하면 된다. <br />
깊게 논문을 읽으며 하나하나 파악하기 보다는 간단하게 다룰 예정이므로, 더 궁금한 내용이 있다면 직접 논문을 읽어보는 것을 추천한다.</p>

<h3 id="-들어가기-전에">🤔 들어가기 전에…</h3>
<p>Object detection에는 1-stage detector, 2-stage detector가 있다.</p>

<p><img src="/public/img/2-stage.png" alt="2-stage" width="70%" height="70%" class="center" /></p>

<p>2-stage detector는 Selective search, Region proposal network와 같은 알고리즘을 및 네트워크를 통해 object가 있을만한 영역을 우선 뽑고( 이 영역을 RoI 라고 함) , 각 영역을 Conv를 통해 classification, box regression(localization)을 수행한다.</p>

<p><img src="/public/img/1-stage.png" alt="1-stage" width="70%" height="70%" class="center" /></p>

<p>1-stage detector는 2-stage와 다르게 RoI영역을 먼저 추출하지 않고 전체 image에 대해서 convolution network로 classification, box regression(localization)을 수행한다.</p>

<p>굳이 장단점을 애기하자면 object 하나만 담고있는 RoI에서 classification, localization을 수행하는 것보다 여러 noise 즉, 여러 object가 섞여있는 전체 image에서 이를 수행하는게 더 정확도는 떨어지지만,  간단하고 쉬운만큼 속도가 빠르다는 장점이 있다.</p>

<p>갑자기 이런 이야기를 꺼내는 이유는 <strong>2-stage Detector</strong> 중 대표적인 <strong>R-CNN, Fast R-CNN, Faster R-CNN</strong>중에 먼저 R-CNN계열의 시초이자 근본이 <strong>R-CNN</strong>이기 때문이다.</p>

<h3 id="-r-cnn-요약">📝 R-CNN 요약</h3>

<p>RCNN은 Region Proposals + CNN을 결합한 모델을 말한다.</p>
<ul>
  <li>Region Proposals : 카테고리와 무관하게 물체의 영역을 찾는 모델
<img src="/public/img/rcnn01.png" alt="rcnn" /></li>
</ul>

<p>RCNN은 아래와 같은 과정을 거친다.</p>

<ol>
  <li>입력 이미지에서 Selective Search 알고리즘 적용하여 bounding box(bbox) 2000개 추출
    <ul>
      <li>Selective Search : bbox들을 random하게 많이 생성하고 이들을 조금씩 merge해나가면서 물체를 인식해나가는 방식</li>
    </ul>
  </li>
  <li>추출된 bbox를 warp(resize)하여 CNN에 입력</li>
  <li>fine tuning 되어 있는 pre-trained CNN을 사용하여 특징 벡터 추출
    <ul>
      <li>fine tunning : 모델 파라미터를 미세하게 조정하는 것</li>
      <li>pre-trained : 이미 학습된 모델</li>
    </ul>
  </li>
  <li>추출된 특징 벡터를 SVM을 이용하여 class를 분류</li>
  <li>bbox regression을 적용하여 bbox 위치를 조정
    <ul>
      <li>bbox regression 의 목표 : predicted box 와 ground truth box와 유사하도록 학습하는 것</li>
    </ul>
  </li>
</ol>

<p>RCNN 논문의 핵심은 아래와 같다.</p>
<h4 id="︎-region-proposal영역찾기">✔︎ Region Proposal(영역찾기)</h4>
<p><img src="/public/img/rcnn04.png" alt="rcnn4" /></p>

<p>RCNN에서 랜덤하게 영역을 찾는 이유는 sliding window 방식의 비효율성을 극복하기 위해 랜덤하게 다양한 비율로 모든 영역을 탐색하기 위해서다.</p>

<p><img src="/public/img/rcnn05.png" alt="rcnn5" /></p>

<p>이렇게 색상, 질감, 다양하게 이용하여 segmentation을 수행하고, Bottom-up 방식으로 small segmented areas들을 합쳐서 더 큰 segmented areas들을 만들 수 있다.</p>

<h4 id="︎-cnn">✔︎ CNN</h4>

<p><img src="/public/img/rcnn06.png" alt="rcnn6" /></p>

<p>위에서 찾은 영역을 224x224 크기로 CNN 모델에 넣는다</p>

<h4 id="︎-svm">✔︎ SVM</h4>

<p><img src="/public/img/rcnn07.png" alt="rcnn7" /></p>

<p>CNN모델로부터 feature가 추출되면 LinearSVM을 통해 classification을 진행한다.
SVM은 CNN으로부터 추출된 각각의 feature vector들의 점수를 class별로 매기고, 객체인지 아닌지, 객체라면 어떤 객체인지 등을 판별하고 Selective search로 만든 bounding box는 정확하지 않기 때문에 물체를 정확히 감싸도록 조정해주는 bounding box regression(선형회귀 모델)을 이용하여 조정한다.</p>

<ul>
  <li>bounding box regression: Selective search를 통해 찾은 박스 위치는 정확하지 않아서, predicted box가 ground truth box와 유사하도록 학습하는 것이 목표다.</li>
</ul>

<h3 id="-r-cnn이-classifier로-softmax를-쓰지-않고-svm을-사용한-이유">🤔 R-CNN이 classifier로 Softmax를 쓰지 않고 SVM을 사용한 이유</h3>
<p>VOC2007 데이터셋 기준으로 Softmax를 사용했을 때 mAP값이 54.2%에서 50.9%로 떨어졌기 때문이다.</p>

<p><img src="/public/img/rcnn02.png" alt="rcnn2" width="50%" height="50%" class="center" />
<img src="/public/img/rcnn03.png" alt="rcnn3" width="50%" height="50%" class="center" /></p>

<h3 id="-단점">🥲 단점</h3>
<ol>
  <li>오래걸린다.
<img src="/public/img/rcnn08.png" alt="rcnn8" width="30%" height="30%" class="center" />
    <ul>
      <li>인풋 이미지마다 2000개의 bbox를 추출하여 CNN모델에 넣기 때문에 오래걸린다.</li>
    </ul>
  </li>
  <li>모델이 생각보다 복잡하다.
    <ul>
      <li>CNN, SVM, BBOX Regression 총 3가지 모델을 필요로 하는 모델이다.</li>
    </ul>
  </li>
  <li>back Propagation이 안된다.
    <ul>
      <li>SVM, BBOX Regression 에서의 학습결과가 CNN을 업데이트 시키지 못한다.</li>
    </ul>
  </li>
</ol>

<p>그럼 이러한 단점에도 R-CNN논문이 왜 유명한가?<br />
2-stage detector들의 구조에 많은 영향을 주었고, Obejct Detection에 CNN을 적용시켰다는 점에서 아주 의미가 있기 때문에 유명하다.</p>]]></content><author><name></name></author><category term="Paper" /><summary type="html"><![CDATA[Paper URL : https://arxiv.org/pdf/1311.2524.pdf]]></summary></entry><entry><title type="html">AWS MFA 2차 인증 설정하기 (Multi Factor Authentication)</title><link href="http://localhost:4000/aws/2022/12/18/AWS-MFA.html" rel="alternate" type="text/html" title="AWS MFA 2차 인증 설정하기 (Multi Factor Authentication)" /><published>2022-12-18T14:00:00+09:00</published><updated>2022-12-18T14:00:00+09:00</updated><id>http://localhost:4000/aws/2022/12/18/AWS-MFA</id><content type="html" xml:base="http://localhost:4000/aws/2022/12/18/AWS-MFA.html"><![CDATA[<p>🔐 <strong>What is MFA ?</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💡 MFA는 Multi-Factor Authentication의 약자.
사용자 인증 방식 중 하나. 2차 인증이기 때문에 하는 것이 꼭 좋다.
</code></pre></div></div>

<h3 id="mfa-3가지-방식">MFA 3가지 방식</h3>

<p>대중적인 MFA 방식은 3가지가 있다.</p>

<ol>
  <li>Password : 사용자가 설정한 Password를 입력하여 인증</li>
  <li>OTP(One Time Password) : 사전에 OTP기기와 AWS에서 세팅을 한 후에, 일정 시간동안 유효한 숫자 Password를 입력하여 인증</li>
  <li>인증 전용 USB(U2E) : 사전에 등록된 USB를 발급받고 인증 시 USB를 PC에 꽂아서 인증</li>
</ol>

<p>여기서 나는 OTP방식으로 사용하려고 한다.</p>

<h3 id="root-user-mfa">Root User MFA</h3>

<p>우선 Root User로 로그인 후 보안 자격 증명을 클릭하자.</p>

<p><img src="/public/img/aws-mfa1.png" alt="aws1" /></p>

<p>보안 자격 증명에서 멀티 팩터 인증(MFA)을 클릭하자.</p>

<p><img src="/public/img/aws-mfa2.png" alt="aws2" /></p>

<p>MFA 활성화 클릭 후 가상 MFA디바이스 체크 후 휴대폰으로 설정하면 끝난다. 
<img src="/public/img/aws-mfa3.png" alt="aws3" /></p>

<h3 id="iam-user-mfa">IAM User MFA</h3>

<p>권한이 없을 경우 Root User로 로그인 후 상단 검색창에 IAM 검색하자.</p>

<p><img src="/public/img/aws-mfa4.png" alt="aws4" /></p>

<p>사용자를 클릭하여 보안 자격증명 탭-사용자 이름을 클릭하자.</p>

<p><img src="/public/img/aws-mfa5.png" alt="aws5" /></p>

<p>그리고 아까와 같이 보안 자격 증명에서 MFA 클릭 후 설정하면 끝이다.</p>

<p><img src="/public/img/aws-mfa6.png" alt="aws5" /></p>

<p>AWS는 해킹으로 인해 과금되는 썰들이 간혹 들리는데, 혹시 모르니 무조건 설정하자.</p>]]></content><author><name></name></author><category term="AWS" /><summary type="html"><![CDATA[🔐 What is MFA ?]]></summary></entry><entry><title type="html">AWS 프리티어 계정 생성하기</title><link href="http://localhost:4000/aws/2022/10/11/aws-create-account.html" rel="alternate" type="text/html" title="AWS 프리티어 계정 생성하기" /><published>2022-10-11T14:00:00+09:00</published><updated>2022-10-11T14:00:00+09:00</updated><id>http://localhost:4000/aws/2022/10/11/aws-create-account</id><content type="html" xml:base="http://localhost:4000/aws/2022/10/11/aws-create-account.html"><![CDATA[<p>AWS 프리티어는 1년간 AWS 일부 서비스를 무료로 사용할 수 있는 것을 말한다. 회원 가입은 생각보다 간단하다.</p>

<h3 id="메일-인증">메일 인증</h3>

<p>가입할 E-mail 주소를 입력하고 [이메일 주소 확인]을 클릭-이메일 확인 코드를 입력한다.<br />
<img src="/public/img/aws-1.png" alt="aws1" /></p>

<p>참고로 탈퇴 후 재가입 할 경우에 같은 이메일은 회원가입이 안된다.</p>

<h3 id="사용-목적-및-개인정보">사용 목적 및 개인정보</h3>

<p>사용 목적은 [개인-자체 프로젝트의 경우]로 체크하고 리전은 [대한민국]으로 선택한다.</p>

<p><img src="/public/img/aws-2.png" alt="aws2" /></p>

<p>주소는 영문만 가능하니, 네이버에 영어 주소명을 검색해서 적어 넣으면 된다.</p>

<h3 id="카드-정보">카드 정보</h3>

<p>신용카드 정보를 입력하면 100원정도 돈이 나가는데, 금방 다시 들어온다.</p>

<p><img src="/public/img/aws-3.png" alt="aws3" /></p>

<h3 id="aws-플랜-선택">AWS 플랜 선택</h3>

<p>무료로 사용하려고 만드는 계정이니 Support 플랜은 [기본 지원-무료]를 선택하면 된다.<br />
<img src="/public/img/aws-4.png" alt="aws4" /></p>

<h3 id="로그인">로그인</h3>

<p>로그인 후 리전이 서울이 아닐 경우 아래와 같이 변경해주자</p>

<p><img src="/public/img/aws-5.png" alt="aws5" /></p>

<h3 id="mulit-factor-authentication">Mulit Factor Authentication</h3>

<p>MFA는 사용자 인증 방식 중 하나인데, 쉽게 말해 2차 인증이다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2차 인증을 왜 해야되나요?  

2차 인증은 AWS에서 하도록 권고하고 있지만 의무가 아니기 때문에 안하는 사람들도 많다.  
그런데 인터넷에 조금만 검색해도 AWS 계정 해킹으로 인해 억 단위로 피해를 입는 사람들이 꽤 있다. 
물론 잘 말해서 환불이나 내지 않도록 할 수 있겠지만 정신적으로 많이 피폐해지니, 그냥 2차 인증을 하도록 하자. 
</code></pre></div></div>

<p>2차 인증 방식에는 3가지가 있다.</p>

<ol>
  <li>Password : 사용자가 설정한 패스워드를 입력해서 인증</li>
  <li>OTP(One Time Password) : 사전에 OTP기기와 AWS에서 세팅 후 일정 시간동안 유효한 숫자를 입력하여 인증</li>
  <li>인증 전용 USB : 사전에 등록된 USB를 발급받고 인증</li>
</ol>

<p>이렇게 있지만 OTP가 제일 사용하기 무난하다.</p>

<h4 id="root-user-mfa">Root User MFA</h4>

<p>최초 가입일 경우 루트 유저일텐데 아래와 같이 [보안 자격 증명]을 클릭한다.</p>

<p><img src="/public/img/aws-6.png" alt="aws6" /></p>

<p>보안 자격 증명에서 MFA를 클릭한다.</p>

<p><img src="/public/img/aws-7.png" alt="aws7" /></p>

<p>MFA 활성화 클릭 후 [가상 MFA 디바이스] 체크 후 휴대폰으로 설정하면 끝난다. 
<img src="/public/img/aws-8.png" alt="aws8" /></p>

<h4 id="iam-user-mfa">IAM User MFA</h4>

<p>권한이 있다면 상관 없겠지만 권한이 없다면 아래와 같이 설정하자.</p>

<p><img src="/public/img/aws-8_1.png" alt="aws8-1" /></p>

<p>상단 검색창에 IAM을 검색 후 좌측 탭에 [사용자]를 클릭한다.</p>

<p><img src="/public/img/aws-9.png" alt="aws9" /></p>

<p>그리고 [보안 자격 증명]을 클릭하고 아까와 같이 설정하면 끝난다.</p>

<p><img src="/public/img/aws-10.png" alt="aws10" /></p>]]></content><author><name></name></author><category term="AWS" /><summary type="html"><![CDATA[AWS 프리티어는 1년간 AWS 일부 서비스를 무료로 사용할 수 있는 것을 말한다. 회원 가입은 생각보다 간단하다.]]></summary></entry><entry><title type="html">소프트웨어 라이선스 유형에 대해 알아보자</title><link href="http://localhost:4000/etc/2022/10/09/sortware-license.html" rel="alternate" type="text/html" title="소프트웨어 라이선스 유형에 대해 알아보자" /><published>2022-10-09T14:00:00+09:00</published><updated>2022-10-09T14:00:00+09:00</updated><id>http://localhost:4000/etc/2022/10/09/sortware-license</id><content type="html" xml:base="http://localhost:4000/etc/2022/10/09/sortware-license.html"><![CDATA[<p>라이선스의 종류에 대해 알아볼까한다.
최근 MIT 라이선스인 오픈 소스를 가지고 2차 창작물로 만들고 있는데, 내부에 LGPL라이선스를 가지고 있는 라이브러리를 보게 되었다.</p>

<p>개념이 조금 헷갈리기 시작해서 공부할 겸 적어볼까한다.</p>

<blockquote>
  <h3 id="라이선스-종류">라이선스 종류</h3>
</blockquote>

<ol>
  <li>Apache License</li>
  <li>GNU(Gnu is Not Unix)</li>
  <li>General Public License(GPL)</li>
  <li>Affero GPL(AGPL)</li>
  <li>Lesser GPL(LGPL)</li>
  <li>MIT License</li>
</ol>

<p>라이선스 종류는 더 있겠지만, 우선 가장 흔하게 볼 수 있는 라이선스만 먼저 다뤄보겠다.</p>

<blockquote>
  <h3 id="apache-license">Apache License</h3>
</blockquote>

<p>많이 들어온 아파치 라이선스는 아파치 소프트웨어 재단에서 자체적으로 만든 라이선스이다. <br />
아파치 라이선스는 누구든 자유롭게 사용이 가능하며, 부분 혹은 전체를 개인적 혹은 상업적 목적으로 이용할 수 있다. 소스코드에 대한 공개 의무 또한 없다.</p>

<p>그러나 반드시 아파치 라이선스 버전 및 표기는 포함하여 아파치 라이선스로 개발된 소프트웨어라는 것을 명확하게 밝혀야 한다.</p>

<h4 id="필수사항">필수사항</h4>

<ul>
  <li>라이선스 및 저작권 명시</li>
  <li>변경사항 명시</li>
</ul>

<h4 id="사용범위">사용범위</h4>

<ul>
  <li>상업적 이용 가능</li>
  <li>배포, 수정 가능</li>
  <li>특허 신청, 사적이용 가능</li>
  <li>2차 라이선스 가능</li>
</ul>

<h4 id="공개-유무">공개 유무</h4>

<p>소스코드 공개 의무 없지만 아파치 라이선스 사용을 밝혀야 함</p>

<blockquote>
  <h3 id="gnugnu-is-not-unix--general-public-licensegpl">GNU(Gnu is Not Unix) , General Public License(GPL)</h3>
</blockquote>

<p>우선 설명하기 전에 Copyleft에 대해 잠깐 보고 가자.</p>

<h4 id="copyleft">Copyleft</h4>
<p>Copyleft는 지식, 정보, 저작물은 자유롭게 공유되어야 한다라고 이야기한다.<br />
1980년대 리처드 스톨먼이 자유로운 소프트웨어 이용을 주장하면서 나왔다고 한다.</p>

<p>그래서 프로그램을 무료로 만들고 프로그램의 모든 수정 및 확장 버전도 무료로 요구한다.</p>

<h4 id="gnugnu-is-not-unix">GNU(Gnu is Not Unix)</h4>
<p>GNU는 1980년대 소프트웨어의 저작권에 대한 법률이 강화되면서 리처드 스톨먼에 의해 GNU 프로젝트와 Free Software Foundation(자유 소프트웨어 재단)을 세우고 여러 프로그래머들이 합류하며 시작되었다.</p>

<p>GNU프로젝트를 따르는 소프트웨어는 누구나 자유롭게 실행, 복사, 수정, 배포할 수 있고 이 권리를 침해할 수 없다.</p>

<h4 id="gpl-general-public-license">GPL (General Public License)</h4>

<p>GPL는 소스코드를 이용하게 될 경우, 전체를 포함한 소스 코드를 공개해야 한다. 이렇게 소스코드를 공개하는 이유는 최종적으로 오픈 소스 진영의 발전을 도모하는 것이 목적이라고 볼 수 있기 때문이다.</p>

<h4 id="필수사항-1">필수사항</h4>

<ul>
  <li>수정한 소스코드 또는 GPL 소스코드를 활용한 소프트웨어 모두 GPL로 공개</li>
  <li>라이선스 및 저작권 명시</li>
  <li>변경사항 명시</li>
</ul>

<h4 id="사용범위-1">사용범위</h4>

<ul>
  <li>상업적 이용 가능</li>
  <li>배포, 수정 가능</li>
  <li>특허 신청, 사적이용 가능</li>
</ul>

<h4 id="공개-유무-1">공개 유무</h4>

<p>개발시 개인적, 내적 이용에 한해서는 소스코드를 공개하지 않아도 되나, 외부 배포 시 해당 소프트웨어의 전체 소스코드를 공개해야 함.</p>

<blockquote>
  <h3 id="affero-gplagpl">Affero GPL(AGPL)</h3>
</blockquote>

<p>AGPL은 기존의 GPL v3을 수정한 것인데, 만약 서버에서 프로그램을 실행하여 서버 상에서 다른 사용자들과 통신하게 된다면 실행되고 있는 프로그램의 소스 코드를 사용자들이 다운로드 받을 수 있게 해야 한다.</p>

<h4 id="필수-사항">필수 사항</h4>

<ul>
  <li>수정한 소스 코드 및 프로그램 모두 AGPL로 공개</li>
  <li>라이선스 및 저작권 명시</li>
  <li>변경사항 명시</li>
  <li>네트워크내의 프로그램 사용자에게 소스코드 공개</li>
</ul>

<h4 id="사용범위-2">사용범위</h4>

<ul>
  <li>상업적 이용 가능</li>
  <li>수정 및 배포 가능</li>
  <li>특허 가능</li>
  <li>사적 이용 가능</li>
</ul>

<blockquote>
  <h3 id="lesser-gpllgpl">Lesser GPL(LGPL)</h3>
</blockquote>

<p>GPL에서 조금 더 완화된 라이선스이다. LGPL로 작성된 소스코드를 라이브러리(정적, 동적)로만 사용하는 경우에는 소스코드를 공개하지 않아도 된다(명시만 하면 됨). 그러나 LGPL 라이브러리의 소스코드를 수정하였을 때에는 2차적 파생 저작물에 해당하므로 라이브러리의 소스코드를 제공해야한다.</p>

<h4 id="필수-사항-1">필수 사항</h4>

<ul>
  <li>수정한 소스 코드 및 프로그램 모두 LGPL로 공개</li>
  <li>라이선스 및 저작권 명시</li>
  <li>라이브러리에만 적용</li>
</ul>

<h4 id="사용범위-3">사용범위</h4>

<ul>
  <li>상업적 이용 가능</li>
  <li>수정 및 배포 가능</li>
  <li>특허 가능</li>
  <li>사적 이용 가능</li>
</ul>

<h4 id="공개-유무-2">공개 유무</h4>

<p>LGPL로 작성된 소스코드를 라이브러리(정적, 동적)로만 사용하는 경우에 소스코드를 공개하지 않아도 됨. 그러나 LGPL 라이브러리의 소스코드를 수정하게 되면 2차적 파생 저작물에 해당되므로 라이브러리의 소스코드를 공개해야 함</p>

<h4 id="gpl-vs-lgpl-차이점">GPL vs LGPL 차이점</h4>
<p>GPL은 소스코드를 전부 공개, LGPL은 2차적 파생 저작물이 아니라면 단순한 라이브러리나 모듈 링크를 허용하는 라이선스.</p>

<blockquote>
  <h3 id="mit-license">MIT License</h3>
</blockquote>

<p>MIT에서 해당 대학의 소프트웨어 공학도들을 돕기 위해 개발한 라이선스이다.</p>

<h4 id="필수-사항-2">필수 사항</h4>

<ul>
  <li>라이선스 및 저작권 명시</li>
</ul>

<h4 id="사용범위-4">사용범위</h4>

<ul>
  <li>상업적 이용 가능</li>
  <li>수정 및 배포 가능</li>
  <li>특허 가능</li>
  <li>사적 이용 가능</li>
  <li>2차 라이선스 가능</li>
</ul>

<hr />
<p>Reference</p>

<p><a href="https://ldap.or.kr/open-source-%EB%9D%BC%EC%9D%B4%EC%84%A0%EC%8A%A4-%EB%B3%84-%ED%8A%B9%EC%A7%95-%EC%A0%95%EB%A6%AC/">https://ldap.or.kr/</a> <br />
<a href="https://datalibrary.tistory.com/111">https://datalibrary.tistory.com/111</a></p>]]></content><author><name></name></author><category term="ETC" /><summary type="html"><![CDATA[라이선스의 종류에 대해 알아볼까한다. 최근 MIT 라이선스인 오픈 소스를 가지고 2차 창작물로 만들고 있는데, 내부에 LGPL라이선스를 가지고 있는 라이브러리를 보게 되었다.]]></summary></entry><entry><title type="html">Python환경 OpenCV + CUDA Build 하기</title><link href="http://localhost:4000/etc/2022/10/03/python-opencv-cuda-build.html" rel="alternate" type="text/html" title="Python환경 OpenCV + CUDA Build 하기" /><published>2022-10-03T14:00:00+09:00</published><updated>2022-10-03T14:00:00+09:00</updated><id>http://localhost:4000/etc/2022/10/03/python-opencv-cuda-build</id><content type="html" xml:base="http://localhost:4000/etc/2022/10/03/python-opencv-cuda-build.html"><![CDATA[<p>최근에 OpenCV Build 하면서 많이 헤맸는데, 이번 기회에 OpenCV빌드에 필요한 내용을 정리해볼까한다.</p>

<h3 id="준비사항">준비사항</h3>

<ol>
  <li>OpenCV : <a href="https://github.com/opencv/opencv">https://github.com/opencv/opencv</a></li>
  <li>OpenCV Contrib : <a href="https://github.com/opencv/opencv_contrib">https://github.com/opencv/opencv_contrib</a></li>
  <li>CMake : <a href="https://cmake.org/download/">https://cmake.org/download/</a></li>
  <li>Visual Studio 2019 : <a href="https://learn.microsoft.com/ko-kr/visualstudio/releases/2019/release-notes">https://learn.microsoft.com/ko-kr/visualstudio</a></li>
</ol>

<h3 id="가상환경-구성">가상환경 구성</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 가상환경 생성 
conda create --name 가상환경 이름 python=3.7

# 가상환경 활성화
conda activate 가상환경 이름

conda install numpy
</code></pre></div></div>

<p>✔ 체크 할 부분</p>
<ul>
  <li>numpy 설치 후 잘 되는지 확인!</li>
  <li>cv2 있는지 확인 할 것. (cv2가 있으면 안됨)</li>
</ul>

<p><img src="/public/img/opencv1.png" alt="opencv" /></p>

<h3 id="opencv--opencv-contrib">OpenCV &amp; OpenCV contrib</h3>

<p>opencv와 opencv contrib를 zip 형태로 다운로드 후 C드라이브에 아래와 같이 풀자.</p>

<p><img src="/public/img/opencv2.png" alt="opencv2" /></p>

<p>저는 C드라이브 밑에 opencvgpu 라는 폴더에 다운 받은 폴더를 풀었고, build하고 생성되는 파일을 담기 위해 build 파일 하나 생성했다.</p>

<p>그리고 선택 사항이지만, opencv contrib/modules안에 복붙 후 opencv/modules 안에 넣으면 CMake 빌드할때 따로 경로 설정을 안해도 된다.</p>

<h3 id="cmake-build">CMake Build</h3>

<p><img src="/public/img/opencv3.png" alt="opencv3" /></p>

<p>CMake에 Where is the source code에는 아까 다운 받은 opencv 폴더 경로, 아래에는 build폴더를 넣는다.</p>

<p><img src="/public/img/opencv4.png" alt="opencv4" /></p>

<p>그리고 Configure를 누르면 아래와 같이 창이 뜨면 아래와 같이 설정 후 Finish를 누른다.</p>

<ul>
  <li>WITH_CUDA = ON</li>
  <li>OPENCV_DNN_CUDA = ON</li>
  <li>ENABLE_FAST_MATH = ON</li>
  <li>INSTALL_PYTHON_EXAMPLES = ON</li>
</ul>

<p>Configire 를 누른다.</p>

<ul>
  <li>WITH_CUDNN = ON</li>
  <li>WITH_CUBLAS = ON</li>
  <li>CUDA_FAST_MATH = ON</li>
</ul>

<p>CUDA ARCH BIN은 <a href="https://en.wikipedia.org/wiki/CUDA">https://en.wikipedia.org/wiki/CUDA</a>에서 자신의 그래픽에 맞늦
번호를 찾으면 된다. 나의 경우는 3060 그래픽이기 때문에 8.6으로 했다.</p>

<ul>
  <li>CUDA_ARCH_BIN = 8.6</li>
</ul>

<p>아래 경로는 아까 생성했던 가상환경을 아래처럼 넣어준다.</p>

<ul>
  <li>PYTHON3_EXECUTABLE = C:/Users/ejkim/anaconda3/envs/opencv_gpu/python.exe</li>
  <li>PYTHON3_INCLUDE_DIR = C:/Users/ejkim/anaconda3/envs/opencv_gpu/include</li>
  <li>PYTHON3_LIBRARY = C:/Users/ejkim/anaconda3/envs/opencv_gpu/libs/python37.lib</li>
  <li>PYTHON3_LIBRARY_DEBUG = C:/Users/ejkim/anaconda3/envs/opencv_gpu/libs/python37.lib</li>
  <li>PYTHON3_NUMPY_INCLUDE_DIRS = C:/Users/ejkim/anaconda3/envs/opencv_gpu/Lib/site-packages/numpy/core/include</li>
  <li>PYTHON3_PACKAGES_PATH = C:/Users/ejkim/anaconda3/envs/opencv_gpu/Lib/site-packages</li>
  <li>BUILD_opencv_world = ON</li>
  <li>OPENCV_ENABLE_NONFREE = ON</li>
  <li>BUILD_WITH_STATIC_CRT = OFF</li>
  <li>CPU_DISPATCH = 공백</li>
</ul>

<p>Configire 누른 후 Generate를 누른다.</p>

<p><img src="/public/img/opencv5.png" alt="opencv5" /></p>

<p>그럼 이렇게 build 폴더에 여러 파일이 생성되는데 여기서 OpenCV.sin을 눌러 Visual Studio 2019를 연다.</p>

<p><img src="/public/img/opencv6.png" alt="opencv6" /></p>

<p>Release, x64로 설정하고 ALL_BUILD에서 빌드를 누른다.</p>

<p><img src="/public/img/opencv7.png" alt="opencv7" /></p>

<p>빌드 끝나면, 다시 INSTALL 우클릭 후 빌드 눌러서 빌드 한다.</p>

<p><img src="/public/img/opencv8.png" alt="opencv8" /></p>

<p>빌드가 끝나면 아래와 같은 경로에 폴더가 생긴다.</p>

<p><img src="/public/img/opencv12.png" alt="opencv12" /></p>

<p>빌드가 잘된 것을 확인 했으니, 아래와 같이 경로를 잡아준다.</p>

<p><img src="/public/img/opencv10.png" alt="opencv10" /></p>

<p>시스템 변수로 위와 같이 잡아주고, Path에 <code class="highlighter-rouge">%OPENCV_DIR%\x64\vc16\bin</code> 를 적어 넣어준다.</p>

<p><img src="/public/img/opencv11.png" alt="opencv11" /></p>

<p>그리고 <code class="highlighter-rouge">cv2.cuda.getCudaEnabledDeviceCount()</code> 로 GPU가 잡히는지 확인하면 끝! 
나는 그래픽 카드가 1개 설치되어 있어서 1이 나온다.</p>

<p>아 그리고, 
하다가 중간에 <code class="highlighter-rouge">ImportError: OpenCV loader: missing configuration file: ['config-3.7.py', 'config-3.py']</code> 와 같은 에러를 만약 보게 된다면, 파이썬 버전을 확인해보자.</p>

<p>나의 경우에는 가상환경 생성 시에 Python 3.7로 생성했는데, 실제 빌드하고 나니까 아래와 같이 파이썬 3.9로 빌드되어 있었다.</p>

<p><img src="/public/img/opencv9.png" alt="opencv9" /></p>

<p>이때 해결법은 두가지인데, 첫번째는 다시 밀고 처음부터 빌드하거나 두번째는 파이썬 3.9로 빌드되어 있으니, 가상환경 파이썬 버전도 3.9로 맞춰준다.</p>

<p>나는 두가지 다 해봤는데, 첫번째의 경우에는 밀고 다시 처음부터를 3번정도 반복하니까…. 잘되었고, 다른 컴퓨터에 다시 빌드 했을 때는 그냥 귀찮아서 파이썬 버전을 맞춰주니 금방 끝났다.</p>

<p>가상환경 파이썬 버전을 다시 맞출 때는 <code class="highlighter-rouge">conda install python==3.9</code> 라고 하면 끝난다.</p>

<p>그리고, 혹시나 빌드 후에 cv2파일이 생성되지 않았다면, CMake 빌드를 위 순서대로 해야 제대로 생성된다.</p>]]></content><author><name></name></author><category term="ETC" /><summary type="html"><![CDATA[최근에 OpenCV Build 하면서 많이 헤맸는데, 이번 기회에 OpenCV빌드에 필요한 내용을 정리해볼까한다.]]></summary></entry></feed>